{"bootstraps":{"bootstrap-0":{"plugin-version":"1.0.0","type":"inline","code":"<?php\n\nuse Phpcq\\PluginApi\\Version10\\BuildConfigInterface;\nuse Phpcq\\PluginApi\\Version10\\ConfigurationOptionsBuilderInterface;\nuse Phpcq\\PluginApi\\Version10\\ConfigurationPluginInterface;\nuse Phpcq\\PluginApi\\Version10\\OutputInterface;\nuse Phpcq\\PluginApi\\Version10\\OutputTransformerFactoryInterface;\nuse Phpcq\\PluginApi\\Version10\\OutputTransformerInterface;\nuse Phpcq\\PluginApi\\Version10\\ReportInterface;\nuse Phpcq\\PluginApi\\Version10\\ToolReportInterface;\nuse Phpcq\\PluginApi\\Version10\\Util\\BufferedLineReader;\n\nreturn new class implements ConfigurationPluginInterface {\n    public function getName(): string\n    {\n        return 'composer-normalize';\n    }\n\n    public function describeOptions(ConfigurationOptionsBuilderInterface $configOptionsBuilder): void\n    {\n        $configOptionsBuilder\n            ->describeBoolOption('dry_run', 'Show the results of normalizing, but do not modify any files', true)\n            ->describeStringOption('file', 'Path to composer.json file relative to project root')\n            ->describeIntOption(\n                'indent_size',\n                'Indent size (an integer greater than 0); should be used with the indent_style option',\n                2\n            )\n            ->describeStringOption(\n                'indent_style',\n                'Indent style (one of \"space\", \"tab\"); should be used with the indent_size option',\n                'space'\n            )\n            ->describeBoolOption('no_update_lock', 'Do not update lock file if it exists');\n    }\n\n    public function processConfig(array $config, BuildConfigInterface $buildConfig): iterable\n    {\n        $composerJson = $config['file'] ?? 'composer.json';\n        assert(is_string($composerJson));\n\n        yield $buildConfig\n            ->getTaskFactory()\n            ->buildRunPhar('composer-normalize', $this->buildArguments($config))\n            ->withWorkingDirectory($buildConfig->getProjectConfiguration()->getProjectRootPath())\n            ->withOutputTransformer($this->createOutputTransformerFactory($composerJson))\n            ->build();\n    }\n\n    /** @psalm-return list<string> */\n    private function buildArguments(array $config): array\n    {\n        $arguments = [];\n\n        if (isset($config['file'])) {\n            $arguments[] = (string) $config['file'];\n        }\n\n        if (!isset($config['dry_run']) || $config['dry_run']) {\n            $arguments[] = '--dry-run';\n        }\n\n        if (isset($config['indent_size'])) {\n            $arguments[] = '--indent-size';\n            $arguments[] = (string) $config['indent_size'];\n        }\n\n        if (isset($config['indent_style'])) {\n            $arguments[] = '--indent-style';\n            $arguments[] = (string) $config['indent_style'];\n        }\n\n        if (isset($config['no_update_lock'])) {\n            $arguments[] = '--no-update-lock';\n        }\n\n        return $arguments;\n    }\n\n    private function createOutputTransformerFactory(string $composerFile): OutputTransformerFactoryInterface\n    {\n        return new class ($composerFile) implements OutputTransformerFactoryInterface {\n            /** @var string */\n            private $composerFile;\n\n            public function __construct(string $composerFile)\n            {\n                $this->composerFile = $composerFile;\n            }\n\n            public function createFor(ToolReportInterface $report): OutputTransformerInterface\n            {\n                return new class ($this->composerFile, $report) implements OutputTransformerInterface {\n                    private const REGEX_IN_APPLICATION = '#^In Application\\.php line [0-9]*:$#';\n                    private const REGEX_NOT_WRITABLE = '#^.* is not writable\\.$#';\n                    private const REGEX_NOT_NORMALIZED = '#^.* is not normalized\\.$#';\n                    private const REGEX_IS_NORMALIZED = '#^.* is already normalized\\.$#';\n                    private const REGEX_XDEBUG_ENABLED = '#^(?<message>You are running composer with Xdebug enabled\\.' .\n                    ' This has a major impact on runtime performance\\. See https://getcomposer.org/xdebug)$#';\n                    private const REGEX_LOCK_OUTDATED = '#^(?<message>The lock file is not up to date with the latest' .\n                    ' changes in composer\\.json, it is recommended that you run `composer update --lock`\\.)$#';\n                    private const REGEX_SCHEMA_VIOLATION = '#^.* does not match the expected JSON schema:$#';\n                    private const REGEX_SKIPPED_COMMAND = '#^(?<message>Plugin command normalize \\(.*\\) would' .\n                    ' override a Composer command and has been skipped)#';\n\n                    /** @var string */\n                    private $composerFile;\n                    /** @var BufferedLineReader */\n                    private $data;\n                    /** @var string */\n                    private $diff = '';\n                    /** @var ToolReportInterface */\n                    private $report;\n\n                    public function __construct(string $composerFile, ToolReportInterface $report)\n                    {\n                        $this->composerFile = $composerFile;\n                        $this->report       = $report;\n                        $this->data         = BufferedLineReader::create();\n                    }\n\n                    public function write(string $data, int $channel): void\n                    {\n                        if (OutputInterface::CHANNEL_STDOUT === $channel) {\n                            // This is the ONLY line that is on output channel instead of error.\n                            if (1 === preg_match(self::REGEX_IS_NORMALIZED, $dummy = trim($data))) {\n                                $this->logDiagnostic(\n                                    $this->composerFile . ' is normalized.',\n                                    ToolReportInterface::SEVERITY_INFO\n                                );\n                                return;\n                            }\n                            $this->diff .= $data;\n                            return;\n                        }\n\n                        $this->data->push($data);\n                    }\n\n                    public function finish(int $exitCode): void\n                    {\n                        $this->process();\n                        $this->report->close(0 === $exitCode\n                            ? ReportInterface::STATUS_PASSED\n                            : ReportInterface::STATUS_FAILED);\n                    }\n\n                    private function logDiagnostic(string $message, string $severity): void\n                    {\n                        $this->report->addDiagnostic($severity, $message)->forFile($this->composerFile)->end()->end();\n                    }\n\n                    private function process(): void\n                    {\n                        $unknown = [];\n                        while (null !== $line = $this->data->fetch()) {\n                            if (!$this->processLine($line)) {\n                                $unknown[] = $line;\n                            }\n                        }\n\n                        if ([] !== $unknown) {\n                            $this->logDiagnostic(\n                                'Did not understand the following tool output: ' . \"\\n\" .\n                                implode(\"\\n\", $unknown),\n                                'warning'\n                            );\n                            $this->report\n                                ->addAttachment('composer-normalize-raw.txt')\n                                ->fromString($this->data->getData())\n                                ->end();\n                        }\n\n                        if ('' !== $this->diff) {\n                            $this->report\n                                ->addDiff('composer.json-normalized.diff')\n                                    ->fromString($this->diff)\n                                ->end();\n                        }\n                    }\n\n                    private function processLine(string $line): bool\n                    {\n                        // Never process empty lines.\n                        if (empty($line)) {\n                            return true;\n                        }\n\n                        foreach (\n                            // Regex => callback (...<named match>): void\n                            [\n                                self::REGEX_IN_APPLICATION => function (): void {\n                                    // Ignore header.\n                                },\n                                self::REGEX_NOT_WRITABLE => function (): void {\n                                    $this->logDiagnostic(\n                                        $this->composerFile . ' is not writable.',\n                                        ToolReportInterface::SEVERITY_ERROR\n                                    );\n                                },\n                                self::REGEX_NOT_NORMALIZED => function (): void {\n                                    $this->logDiagnostic(\n                                        $this->composerFile . ' is not normalized.',\n                                        ToolReportInterface::SEVERITY_ERROR\n                                    );\n                                },\n                                self::REGEX_XDEBUG_ENABLED => function (string $message): void {\n                                    $this->logDiagnostic($message, ToolReportInterface::SEVERITY_INFO);\n                                },\n                                self::REGEX_LOCK_OUTDATED => function (string $message): void {\n                                    $this->logDiagnostic($message, ToolReportInterface::SEVERITY_ERROR);\n                                },\n                                self::REGEX_SCHEMA_VIOLATION => function (): void {\n                                    while (null !== $line = $this->data->peek()) {\n                                        if (empty($line)) {\n                                            $this->data->fetch();\n                                            continue;\n                                        }\n                                        if ('-' === $line[0]) {\n                                            $error = substr($line, 2);\n                                            $this->data->fetch();\n                                            // Collect wrapped lines.\n                                            while (null !== $line = $this->data->peek()) {\n                                                if (empty($line)) {\n                                                    break;\n                                                }\n                                                if ('-' !== $line[0]) {\n                                                    $error .= ' ' . $line;\n                                                    $this->data->fetch();\n                                                    continue;\n                                                }\n                                                break;\n                                            }\n                                            $this->logDiagnostic($error, ToolReportInterface::SEVERITY_ERROR);\n                                        }\n                                        if (\n                                            'See https://getcomposer.org/doc/04-schema.md for details on the schema'\n                                            === $line\n                                        ) {\n                                            $this->data->fetch();\n                                            break;\n                                        }\n                                    }\n                                },\n                                self::REGEX_SKIPPED_COMMAND => function (string $message): void {\n                                    $this->logDiagnostic($message, ToolReportInterface::SEVERITY_NOTICE);\n                                },\n                            ] as $pattern => $handler\n                        ) {\n                            if (1 === preg_match($pattern, $line, $matches)) {\n                                $variables = array_filter($matches, 'is_string', ARRAY_FILTER_USE_KEY);\n                                call_user_func_array($handler, $variables);\n                                return true;\n                            }\n                        }\n                        return false;\n                    }\n                };\n            }\n        };\n    }\n};\n","hash":{"type":"sha-512","value":"54a12312abd382c8b99ca25cf890dac1d8babbb655bdd24996ad9a9537c5b049db8299a15ea11417b5da5b2a72825513c68e4e6ab7956ea1d802dda8735bafee"}}},"phars":{"composer-normalize":[{"version":"2.1.0","phar-url":"https://github.com/ergebnis/composer-normalize/releases/download/2.1.0/composer-normalize.phar","bootstrap":"bootstrap-0","requirements":{"php":"^7.1"},"hash":null,"signature":"https://github.com/ergebnis/composer-normalize/releases/download/2.1.0/composer-normalize.phar.asc"},{"version":"2.1.1","phar-url":"https://github.com/ergebnis/composer-normalize/releases/download/2.1.1/composer-normalize.phar","bootstrap":"bootstrap-0","requirements":{"php":"^7.1"},"hash":null,"signature":"https://github.com/ergebnis/composer-normalize/releases/download/2.1.1/composer-normalize.phar.asc"},{"version":"2.1.2","phar-url":"https://github.com/ergebnis/composer-normalize/releases/download/2.1.2/composer-normalize.phar","bootstrap":"bootstrap-0","requirements":{"php":"^7.1"},"hash":null,"signature":"https://github.com/ergebnis/composer-normalize/releases/download/2.1.2/composer-normalize.phar.asc"},{"version":"2.2.0","phar-url":"https://github.com/ergebnis/composer-normalize/releases/download/2.2.0/composer-normalize.phar","bootstrap":"bootstrap-0","requirements":{"php":"^7.1"},"hash":null,"signature":"https://github.com/ergebnis/composer-normalize/releases/download/2.2.0/composer-normalize.phar.asc"},{"version":"2.2.1","phar-url":"https://github.com/ergebnis/composer-normalize/releases/download/2.2.1/composer-normalize.phar","bootstrap":"bootstrap-0","requirements":{"php":"^7.1"},"hash":null,"signature":"https://github.com/ergebnis/composer-normalize/releases/download/2.2.1/composer-normalize.phar.asc"},{"version":"2.2.2","phar-url":"https://github.com/ergebnis/composer-normalize/releases/download/2.2.2/composer-normalize.phar","bootstrap":"bootstrap-0","requirements":{"php":"^7.1"},"hash":null,"signature":"https://github.com/ergebnis/composer-normalize/releases/download/2.2.2/composer-normalize.phar.asc"},{"version":"2.2.3","phar-url":"https://github.com/ergebnis/composer-normalize/releases/download/2.2.3/composer-normalize.phar","bootstrap":"bootstrap-0","requirements":{"php":"^7.1"},"hash":null,"signature":null},{"version":"2.2.4","phar-url":"https://github.com/ergebnis/composer-normalize/releases/download/2.2.4/composer-normalize.phar","bootstrap":"bootstrap-0","requirements":{"php":"^7.1"},"hash":null,"signature":"https://github.com/ergebnis/composer-normalize/releases/download/2.2.4/composer-normalize.phar.asc"},{"version":"2.3.0","phar-url":"https://github.com/ergebnis/composer-normalize/releases/download/2.3.0/composer-normalize.phar","bootstrap":"bootstrap-0","requirements":{"php":"^7.1"},"hash":null,"signature":"https://github.com/ergebnis/composer-normalize/releases/download/2.3.0/composer-normalize.phar.asc"},{"version":"2.3.2","phar-url":"https://github.com/ergebnis/composer-normalize/releases/download/2.3.2/composer-normalize.phar","bootstrap":"bootstrap-0","requirements":{"php":"^7.1"},"hash":null,"signature":"https://github.com/ergebnis/composer-normalize/releases/download/2.3.2/composer-normalize.phar.asc"},{"version":"2.4.0","phar-url":"https://github.com/ergebnis/composer-normalize/releases/download/2.4.0/composer-normalize.phar","bootstrap":"bootstrap-0","requirements":{"php":"^7.1"},"hash":null,"signature":"https://github.com/ergebnis/composer-normalize/releases/download/2.4.0/composer-normalize.phar.asc"},{"version":"2.5.0","phar-url":"https://github.com/ergebnis/composer-normalize/releases/download/2.5.0/composer-normalize.phar","bootstrap":"bootstrap-0","requirements":{"php":"^7.1"},"hash":null,"signature":"https://github.com/ergebnis/composer-normalize/releases/download/2.5.0/composer-normalize.phar.asc"},{"version":"2.5.1","phar-url":"https://github.com/ergebnis/composer-normalize/releases/download/2.5.1/composer-normalize.phar","bootstrap":"bootstrap-0","requirements":{"php":"^7.1"},"hash":null,"signature":"https://github.com/ergebnis/composer-normalize/releases/download/2.5.1/composer-normalize.phar.asc"}]}}