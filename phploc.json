{"bootstraps":{"bootstrap-0":{"plugin-version":"1.0.0","type":"inline","code":"<?php\n\n/**\n * Tool home: https://github.com/sebastianbergmann/phploc\n */\n\nuse Phpcq\\PluginApi\\Version10\\Configuration\\PluginConfigurationBuilderInterface;\nuse Phpcq\\PluginApi\\Version10\\Configuration\\PluginConfigurationInterface;\nuse Phpcq\\PluginApi\\Version10\\DiagnosticsPluginInterface;\nuse Phpcq\\PluginApi\\Version10\\EnvironmentInterface;\nuse Phpcq\\PluginApi\\Version10\\Output\\OutputTransformerFactoryInterface;\nuse Phpcq\\PluginApi\\Version10\\Output\\OutputTransformerInterface;\nuse Phpcq\\PluginApi\\Version10\\Report\\ToolReportInterface;\n\nreturn new class implements DiagnosticsPluginInterface {\n    public function getName(): string\n    {\n        return 'phploc';\n    }\n\n    public function describeConfiguration(PluginConfigurationBuilderInterface $configOptionsBuilder): void\n    {\n        $configOptionsBuilder->supportDirectories();\n        $configOptionsBuilder\n            ->describeStringListOption(\n                'excluded',\n                'List of excluded files.'\n            )\n            ->withDefaultValue([])\n            ->isRequired()\n            ->withNormalizer(static function ($value) { return trim($value); });\n        $configOptionsBuilder\n            ->describeStringListOption(\n                'custom_flags',\n                'Any custom flags to pass to phploc. For valid flags refer to the phploc documentation.'\n            )\n            ->withDefaultValue([])\n            ->isRequired();\n    }\n\n    public function createDiagnosticTasks(\n        PluginConfigurationInterface $config,\n        EnvironmentInterface $buildConfig\n    ): iterable {\n        $directories = $config->getStringList('directories');\n\n        $args = [\n            '--log-xml',\n            $logFile = $buildConfig->getUniqueTempFile($this, 'log.xml')\n        ];\n        if ($config->has('excluded')) {\n            foreach ($config->getStringList('excluded') as $path) {\n                $args[] = '--exclude=' . $path;\n            }\n        }\n\n        if ($config->has('custom_flags')) {\n            foreach ($config->getStringList('custom_flags') as $value) {\n                $args[] = $value;\n            }\n        }\n\n        yield $buildConfig\n            ->getTaskFactory()\n            ->buildRunPhar('phploc', array_merge($args, $directories))\n            ->withOutputTransformer($this->createOutputTransformer($logFile))\n            ->withWorkingDirectory($buildConfig->getProjectConfiguration()->getProjectRootPath())\n            ->build();\n    }\n\n    private function createOutputTransformer(string $xmlFile): OutputTransformerFactoryInterface\n    {\n        return new class ($xmlFile) implements OutputTransformerFactoryInterface {\n            private $xmlFile;\n\n            public function __construct(string $xmlFile)\n            {\n                $this->xmlFile = $xmlFile;\n            }\n\n            public function createFor(ToolReportInterface $report): OutputTransformerInterface\n            {\n                return new class ($this->xmlFile, $report) implements OutputTransformerInterface {\n                    private const DICTIONARY = [\n                        // LIST copied from https://github.com/sebastianbergmann/phploc/blob/master/src/Log/Csv.php\n                        'directories'                 => 'Directories',\n                        'files'                       => 'Files',\n                        'loc'                         => 'Lines of Code (LOC)',\n                        'ccnByLloc'                   => 'Cyclomatic Complexity / Lines of Code',\n                        'cloc'                        => 'Comment Lines of Code (CLOC)',\n                        'ncloc'                       => 'Non-Comment Lines of Code (NCLOC)',\n                        'lloc'                        => 'Logical Lines of Code (LLOC)',\n                        'llocGlobal'                  => 'LLOC outside functions or classes',\n                        'namespaces'                  => 'Namespaces',\n                        'interfaces'                  => 'Interfaces',\n                        'traits'                      => 'Traits',\n                        'classes'                     => 'Classes',\n                        'abstractClasses'             => 'Abstract Classes',\n                        'concreteClasses'             => 'Concrete Classes',\n                        'finalClasses'                => 'Final Classes',\n                        'nonFinalClasses'             => 'Non-Final Classes',\n                        'llocClasses'                 => 'Classes Length (LLOC)',\n                        'methods'                     => 'Methods',\n                        'nonStaticMethods'            => 'Non-Static Methods',\n                        'staticMethods'               => 'Static Methods',\n                        'publicMethods'               => 'Public Methods',\n                        'nonPublicMethods'            => 'Non-Public Methods',\n                        'protectedMethods'            => 'Protected Methods',\n                        'privateMethods'              => 'Private Methods',\n                        'classCcnAvg'                 => 'Cyclomatic Complexity / Number of Classes',\n                        'methodCcnAvg'                => 'Cyclomatic Complexity / Number of Methods',\n                        'functions'                   => 'Functions',\n                        'namedFunctions'              => 'Named Functions',\n                        'anonymousFunctions'          => 'Anonymous Functions',\n                        'llocFunctions'               => 'Functions Length (LLOC)',\n                        'llocByNof'                   => 'Average Function Length (LLOC)',\n                        'classLlocAvg'                => 'Average Class Length',\n                        'methodLlocAvg'               => 'Average Method Length',\n                        'averageMethodsPerClass'      => 'Average Methods per Class',\n                        'constants'                   => 'Constants',\n                        'globalConstants'             => 'Global Constants',\n                        'classConstants'              => 'Class Constants',\n                        'publicClassConstants'        => 'Public Class Constants',\n                        'nonPublicClassConstants'     => 'Non-Public Class Constants',\n                        'attributeAccesses'           => 'Attribute Accesses',\n                        'instanceAttributeAccesses'   => 'Non-Static Attribute Accesses',\n                        'staticAttributeAccesses'     => 'Static Attribute Accesses',\n                        'methodCalls'                 => 'Method Calls',\n                        'instanceMethodCalls'         => 'Non-Static Method Calls',\n                        'staticMethodCalls'           => 'Static Method Calls',\n                        'globalAccesses'              => 'Global Accesses',\n                        'globalVariableAccesses'      => 'Global Variable Accesses',\n                        'superGlobalVariableAccesses' => 'Super-Global Variable Accesses',\n                        'globalConstantAccesses'      => 'Global Constant Accesses',\n                        'testClasses'                 => 'Test Classes',\n                        'testMethods'                 => 'Test Methods',\n                        // Custom added words\n                        'ccn'                         => 'Cyclomatic Complexity',\n                    ];\n\n                    /** @var string */\n                    private $xmlFile;\n                    /** @var ToolReportInterface */\n                    private $report;\n\n                    public function __construct(string $xmlFile, ToolReportInterface $report)\n                    {\n                        $this->xmlFile = $xmlFile;\n                        $this->report  = $report;\n                    }\n\n                    public function write(string $data, int $channel): void\n                    {\n                    }\n\n                    public function finish(int $exitCode): void\n                    {\n                        $xmlDocument = new DOMDocument('1.0');\n                        $xmlDocument->load($this->xmlFile);\n                        $rootNode = $xmlDocument->firstChild;\n\n                        if (!$rootNode instanceof DOMNode) {\n                            $this->report->close(\n                                $exitCode === 0\n                                    ? ToolReportInterface::STATUS_PASSED\n                                    : ToolReportInterface::STATUS_FAILED\n                            );\n                            return;\n                        }\n\n                        foreach ($rootNode->childNodes as $childNode) {\n                            if (!$childNode instanceof DOMElement) {\n                                continue;\n                            }\n                            $this->report\n                                ->addDiagnostic(\n                                    ToolReportInterface::SEVERITY_INFO,\n                                    sprintf('%s: %s', $this->createLabel($childNode->nodeName), $childNode->textContent)\n                                )\n                                ->fromSource($childNode->nodeName)\n                                ->withCategory('statistics');\n                        }\n\n                        $this->report->addAttachment('log.xml')\n                            ->fromFile($this->xmlFile)\n                            ->setMimeType('application/xml')\n                            ->end();\n\n                        $this->report->close(\n                            $exitCode === 0\n                                ? ToolReportInterface::STATUS_PASSED\n                                : ToolReportInterface::STATUS_FAILED\n                        );\n                    }\n\n                    private function createLabel(string $text): string\n                    {\n                        if (null !== ($translated = $this->translateWord($text))) {\n                            return $translated;\n                        }\n\n                        return ucfirst(\n                            implode(\n                                ' ',\n                                array_map(\n                                    function (string $word): string {\n                                        return $this->translateWord(strtolower($word)) ?: $word;\n                                    },\n                                    preg_split('/(?=[A-Z])/', $text)\n                                )\n                            )\n                        );\n                    }\n\n                    private function translateWord(string $text): ?string\n                    {\n                        return self::DICTIONARY[$text] ?? null;\n                    }\n                };\n            }\n        };\n    }\n};\n","hash":{"type":"sha-512","value":"cc7e6bdcc1a61b92a09ae07a4f756a93022484501433498aa00960180f52c1b079d743a32b9b46599445f770f5c3ae574353c0bf2b11605270e1aab629743818"}}},"phars":{"phploc":[{"version":"6.0.2","phar-url":"https://phar.phpunit.de/phploc-6.0.2.phar","bootstrap":"bootstrap-0","requirements":{"php":"^7.3","ext-dom":"*","ext-json":"*"},"hash":{"type":"sha-256","value":"1ccb826b0a55b9d77b17656ad72f9c90877737a4a4be3f1517dda73524bfb16e"},"signature":"https://phar.phpunit.de/phploc-6.0.2.phar.asc"},{"version":"6.0.1","phar-url":"https://phar.phpunit.de/phploc-6.0.1.phar","bootstrap":"bootstrap-0","requirements":{"php":"^7.3"},"hash":{"type":"sha-256","value":"543b587b04ff11b1d1eb9ea245249a6aab08ff40f4151b4bf3f0ff393a818e96"},"signature":"https://phar.phpunit.de/phploc-6.0.1.phar.asc"},{"version":"6.0.0","phar-url":"https://phar.phpunit.de/phploc-6.0.0.phar","bootstrap":"bootstrap-0","requirements":{"php":"^7.3"},"hash":{"type":"sha-256","value":"49145e07cd94491608f25a045ed860b78ab2dd291e2a9570254d189ed2abfd06"},"signature":"https://phar.phpunit.de/phploc-6.0.0.phar.asc"},{"version":"5.0.0","phar-url":"https://phar.phpunit.de/phploc-5.0.0.phar","bootstrap":"bootstrap-0","requirements":{"php":"^7.2"},"hash":{"type":"sha-256","value":"1399c8025f87bc6021697ce3476ebc6e57c647e47b22d4558ab82784af48b1d8"},"signature":"https://phar.phpunit.de/phploc-5.0.0.phar.asc"},{"version":"4.0.1","phar-url":"https://phar.phpunit.de/phploc-4.0.1.phar","bootstrap":"bootstrap-0","requirements":{"php":"^5.6 || ^7.0"},"hash":{"type":"sha-256","value":"626b7320984ecd400dee8da9ebd10c3527084f698de640d9bfd5d03564743582"},"signature":"https://phar.phpunit.de/phploc-4.0.1.phar.asc"},{"version":"4.0.0","phar-url":"https://phar.phpunit.de/phploc-4.0.0.phar","bootstrap":"bootstrap-0","requirements":{"php":"^5.6 || ^7.0"},"hash":{"type":"sha-256","value":"6b26f5b39e0b54e39892acfd049e7f408fa20b8f12ca8e38a6d01707165a6b95"},"signature":"https://phar.phpunit.de/phploc-4.0.0.phar.asc"},{"version":"3.0.1","phar-url":"https://phar.phpunit.de/phploc-3.0.1.phar","bootstrap":"bootstrap-0","requirements":{"php":">=5.6"},"hash":{"type":"sha-256","value":"a712dec6b1044505a411d207813c6b11cc1c138c0ed467f65788b6f9441c9701"},"signature":"https://phar.phpunit.de/phploc-3.0.1.phar.asc"},{"version":"3.0.0","phar-url":"https://phar.phpunit.de/phploc-3.0.0.phar","bootstrap":"bootstrap-0","requirements":{"php":">=5.6"},"hash":{"type":"sha-256","value":"2d5ed6990f056c7cfbfadf03c926b39370ac9afde66747c30f50d2594bff6dca"},"signature":"https://phar.phpunit.de/phploc-3.0.0.phar.asc"}]}}