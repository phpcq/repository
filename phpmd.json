{"bootstraps":{"bootstrap-0":{"plugin-version":"1.0.0","type":"inline","code":"<?php\n\n/**\n * Tool home: https://github.com/phpmd/phpmd\n */\n\nuse Phpcq\\PluginApi\\Version10\\Configuration\\PluginConfigurationBuilderInterface;\nuse Phpcq\\PluginApi\\Version10\\Configuration\\PluginConfigurationInterface;\nuse Phpcq\\PluginApi\\Version10\\DiagnosticsPluginInterface;\nuse Phpcq\\PluginApi\\Version10\\EnvironmentInterface;\nuse Phpcq\\PluginApi\\Version10\\Output\\OutputTransformerFactoryInterface;\nuse Phpcq\\PluginApi\\Version10\\Output\\OutputTransformerInterface;\nuse Phpcq\\PluginApi\\Version10\\Report\\ToolReportInterface;\n\nreturn new class implements DiagnosticsPluginInterface {\n    public function getName(): string\n    {\n        return 'phpmd';\n    }\n\n    public function describeConfiguration(PluginConfigurationBuilderInterface $configOptionsBuilder): void\n    {\n        $configOptionsBuilder->supportDirectories();\n        $configOptionsBuilder\n            ->describeStringListOption(\n                'ruleset',\n                'List of rulesets (cleancode, codesize, controversial, design, naming, unusedcode).'\n            )\n            ->isRequired()\n            ->withDefaultValue(['naming', 'unusedcode']);\n\n        $configOptionsBuilder\n            ->describeStringListOption(\n                'custom_flags',\n                'Any custom flags to pass to phpmd. For valid flags refer to the phpmd documentation.'\n            )\n            ->isRequired()\n            ->withDefaultValue([]);\n    }\n\n    public function createDiagnosticTasks(\n        PluginConfigurationInterface $config,\n        EnvironmentInterface $buildConfig\n    ): iterable {\n        $directories = $config->getStringList('directories');\n\n        $args = [\n            implode(',', $directories),\n            'xml',\n            implode(',', $config->getStringList('ruleset')),\n        ];\n\n        if ($config->has('excluded')) {\n            foreach ($config->getStringList('excluded') as $path) {\n                if ('' === ($path = trim($path))) {\n                    continue;\n                }\n                $args[] = '--exclude=' . $path;\n            }\n        }\n\n        if ($config->has('custom_flags')) {\n            foreach ($config->getStringList('custom_flags') as $value) {\n                $args[] = $value;\n            }\n        }\n\n        $xmlfile = $buildConfig->getUniqueTempFile($this, 'xml');\n        $args[]  = '--report-file';\n        $args[]  = $xmlfile;\n\n        yield $buildConfig\n            ->getTaskFactory()\n            ->buildRunPhar('phpmd', $args)\n            ->withWorkingDirectory($buildConfig->getProjectConfiguration()->getProjectRootPath())\n            ->withOutputTransformer(\n                $this->createOutputTransformer($xmlfile, $buildConfig->getProjectConfiguration()->getProjectRootPath())\n            )\n            ->build();\n    }\n\n    private function createOutputTransformer(string $xmlFile, string $rootDir): OutputTransformerFactoryInterface\n    {\n        return new class ($xmlFile, $rootDir) implements OutputTransformerFactoryInterface {\n            private $xmlFile;\n            private $rootDir;\n\n            public function __construct(string $xmlFile, string $rootDir)\n            {\n                $this->xmlFile = $xmlFile;\n                $this->rootDir = $rootDir;\n            }\n\n            public function createFor(ToolReportInterface $report): OutputTransformerInterface\n            {\n                return new class ($this->xmlFile, $this->rootDir, $report) implements OutputTransformerInterface {\n                    /** @var string */\n                    private $xmlFile;\n                    /** @var string */\n                    private $rootDir;\n                    /** @var ToolReportInterface */\n                    private $report;\n\n                    public function __construct(string $xmlFile, string $rootDir, ToolReportInterface $report)\n                    {\n                        $this->xmlFile = $xmlFile;\n                        $this->rootDir = $rootDir;\n                        $this->report  = $report;\n                    }\n\n\n                    public function write(string $data, int $channel): void\n                    {\n                        // FIXME: do we also want to parse stdout/stderr?\n                    }\n\n                    public function finish(int $exitCode): void\n                    {\n                        $xmlDocument = new DOMDocument('1.0');\n                        $xmlDocument->load($this->xmlFile);\n                        $rootNode = $xmlDocument->firstChild;\n\n                        if (!$rootNode instanceof DOMNode) {\n                            $this->report->close(\n                                $exitCode === 0\n                                    ? ToolReportInterface::STATUS_PASSED\n                                    : ToolReportInterface::STATUS_FAILED\n                            );\n                            return;\n                        }\n\n                        foreach ($rootNode->childNodes as $childNode) {\n                            if (!$childNode instanceof DOMElement || $childNode->nodeName !== 'file') {\n                                continue;\n                            }\n\n                            $fileName = $childNode->getAttribute('name');\n                            if (strpos($fileName, $this->rootDir) === 0) {\n                                $fileName = substr($fileName, strlen($this->rootDir) + 1);\n                            }\n\n                            foreach ($childNode->childNodes as $violationNode) {\n                                if (!$violationNode instanceof DOMElement) {\n                                    continue;\n                                }\n\n                                /*\n                                 * <violation> may have:\n                                 * beginline: starting line of the issue.\n                                 * endline:   ending line of the issue.\n                                 * rule:      name of the rule.\n                                 * ruleset:   name of the ruleset the rule is defined within.\n                                 * package:   namespace of the class where the issue is within.\n                                 * class:     name of the class where the issue is within.\n                                 * method:    name of the method where the issue is within.\n                                 * externalInfoUrl: external URL describing the violation.\n                                 * priority: The priority for the rule.\n                                 *           This can be a value in the range 1-5, where 1 is the highest priority and\n                                 *           5 the lowest priority.\n                                 */\n\n                                $message = sprintf(\n                                    '%s%s(Ruleset: %s, %s)',\n                                    trim($violationNode->textContent),\n                                    \"\\n\",\n                                    (string) $this->getXmlAttribute($violationNode, 'ruleset', ''),\n                                    (string) $this->getXmlAttribute($violationNode, 'externalInfoUrl', '')\n                                );\n\n                                $severity = ToolReportInterface::SEVERITY_FATAL;\n                                if (null !== $prio = $this->getIntXmlAttribute($violationNode, 'priority')) {\n                                    // FIXME: Is this mapping correct?\n                                    switch ($prio) {\n                                        case 1:\n                                        case 2:\n                                        case 3:\n                                            $severity = ToolReportInterface::SEVERITY_MAJOR;\n                                            break;\n                                        case 4:\n                                            $severity = ToolReportInterface::SEVERITY_MINOR;\n                                            break;\n                                        case 5:\n                                        default:\n                                            $severity = ToolReportInterface::SEVERITY_INFO;\n                                    }\n                                }\n\n                                $beginLine = $this->getIntXmlAttribute($violationNode, 'beginline');\n                                $endLine   = $this->getIntXmlAttribute($violationNode, 'endline');\n                                $this->report->addDiagnostic($severity, $message)\n                                    ->forFile($fileName)\n                                        ->forRange(\n                                            (int) $this->getIntXmlAttribute($violationNode, 'beginline'),\n                                            null,\n                                            $endLine !== $beginLine ? $endLine : null,\n                                        )\n                                        ->end()\n                                    ->fromSource((string) $this->getXmlAttribute($violationNode, 'rule'))\n                                    ->end();\n                            }\n                        }\n\n                        $this->report->addAttachment('pmd.xml')\n                                ->fromFile($this->xmlFile)\n                                ->setMimeType('application/xml')\n                            ->end();\n\n                        $this->report->close(\n                            $exitCode === 0\n                                ? ToolReportInterface::STATUS_PASSED\n                                : ToolReportInterface::STATUS_FAILED\n                        );\n                    }\n\n                    /**\n                     * @param mixed $defaultValue\n                     */\n                    private function getXmlAttribute(\n                        DOMElement $element,\n                        string $attribute,\n                        ?string $defaultValue = null\n                    ): ?string {\n                        if ($element->hasAttribute($attribute)) {\n                            return $element->getAttribute($attribute);\n                        }\n\n                        return $defaultValue;\n                    }\n\n                    private function getIntXmlAttribute(DOMElement $element, string $attribute): ?int\n                    {\n                        $value = $this->getXmlAttribute($element, $attribute);\n                        if ($value === null) {\n                            return null;\n                        }\n\n                        return (int) $value;\n                    }\n                };\n            }\n        };\n    }\n};\n","hash":{"type":"sha-512","value":"b9228d8fc040a97a765c9f2e5bd77e6ace09e05cef49275bed917d4981b42cdb5a94c1d027c6b2caf6d507a8a334ba17c569f56648f384615a6bdfcb0ab006a2"}}},"phars":{"phpmd":[{"version":"2.6.1","phar-url":"https://github.com/phpmd/phpmd/releases/download/2.6.1/phpmd.phar","bootstrap":"bootstrap-0","requirements":{"php":">=5.3.9","ext-xml":"*"},"hash":null,"signature":null},{"version":"2.7.0","phar-url":"https://github.com/phpmd/phpmd/releases/download/2.7.0/phpmd.phar","bootstrap":"bootstrap-0","requirements":{"php":">=5.3.9","ext-xml":"*"},"hash":null,"signature":"https://github.com/phpmd/phpmd/releases/download/2.7.0/phpmd.phar.asc"},{"version":"2.8.0-beta.1","phar-url":"https://github.com/phpmd/phpmd/releases/download/2.8.0-beta.1/phpmd.phar","bootstrap":"bootstrap-0","requirements":{"php":">=5.3.9","ext-xml":"*"},"hash":null,"signature":null},{"version":"2.8.0-beta.2","phar-url":"https://github.com/phpmd/phpmd/releases/download/2.8.0-beta.2/phpmd.phar","bootstrap":"bootstrap-0","requirements":{"php":">=5.3.9","ext-xml":"*"},"hash":null,"signature":null},{"version":"2.8.0","phar-url":"https://github.com/phpmd/phpmd/releases/download/2.8.0/phpmd.phar","bootstrap":"bootstrap-0","requirements":{"php":">=5.3.9","ext-xml":"*"},"hash":null,"signature":null},{"version":"2.8.1","phar-url":"https://github.com/phpmd/phpmd/releases/download/2.8.1/phpmd.phar","bootstrap":"bootstrap-0","requirements":{"php":">=5.3.9","ext-xml":"*"},"hash":null,"signature":null},{"version":"2.8.2","phar-url":"https://github.com/phpmd/phpmd/releases/download/2.8.2/phpmd.phar","bootstrap":"bootstrap-0","requirements":{"php":">=5.3.9","ext-xml":"*"},"hash":null,"signature":null},{"version":"2.9.0","phar-url":"https://github.com/phpmd/phpmd/releases/download/2.9.0/phpmd.phar","bootstrap":"bootstrap-0","requirements":{"php":">=5.3.9","ext-xml":"*"},"hash":null,"signature":null}]}}