{"bootstraps":{"bootstrap-0":{"plugin-version":"1.0.0","type":"inline","code":"<?php\n\n/**\n * Tool home: https://github.com/phpmd/phpmd\n */\n\nuse Phpcq\\PluginApi\\Version10\\BuildConfigInterface;\nuse Phpcq\\PluginApi\\Version10\\ConfigurationOptionsBuilderInterface;\nuse Phpcq\\PluginApi\\Version10\\ConfigurationPluginInterface;\nuse Phpcq\\PluginApi\\Version10\\OutputTransformerFactoryInterface;\nuse Phpcq\\PluginApi\\Version10\\OutputTransformerInterface;\nuse Phpcq\\PluginApi\\Version10\\ReportInterface;\nuse Phpcq\\PluginApi\\Version10\\ToolReportInterface;\n\nreturn new class implements ConfigurationPluginInterface {\n    public function getName(): string\n    {\n        return 'phpmd';\n    }\n\n    public function describeOptions(ConfigurationOptionsBuilderInterface $configOptionsBuilder): void\n    {\n        $configOptionsBuilder->describeArrayOption(\n            'ruleset',\n            'List of rulesets (cleancode, codesize, controversial, design, naming, unusedcode).',\n            [\n                'naming',\n                'unusedcode'\n            ]\n        );\n\n        $configOptionsBuilder->describeArrayOption(\n            'custom_flags',\n            'Any custom flags to pass to phpmd.'\n        );\n\n        $configOptionsBuilder->describeArrayOption(\n            'directories',\n            'Source directories to be analyzed with phpmd.'\n        );\n    }\n\n\n    public function processConfig(array $config, BuildConfigInterface $buildConfig): iterable\n    {\n        [$should, $excluded] = $this->processDirectories($config['directories']);\n\n        $flags = ['ruleset' => 'naming,unusedcode'];\n\n        foreach ($flags as $key => $value) {\n            if ('' !== ($value = $this->commaValues($config, $key))) {\n                $flags[$key] = $value;\n            }\n        }\n\n        $args = [\n            implode(',', $should),\n            'xml',\n            $flags['ruleset'],\n        ];\n\n        if ([] !== $excluded) {\n            $exclude = [];\n            foreach ($excluded as $path) {\n                if ('' === ($path = trim($path))) {\n                    continue;\n                }\n                $exclude[] = $path;\n            }\n            $args[] = '--exclude=' . implode(',', $exclude);\n        }\n        if ([] !== ($values = $config['custom_flags'] ?? [])) {\n            foreach ($values as $value) {\n                $args[] = (string) $value;\n            }\n        }\n\n        $xmlfile = $xmlfile = $buildConfig->getUniqueTempFile($this, 'xml');\n        $args[] = '--report-file';\n        $args[] = $xmlfile;\n\n        yield $buildConfig\n            ->getTaskFactory()\n            ->buildRunPhar('phpmd', $args)\n            ->withWorkingDirectory($buildConfig->getProjectConfiguration()->getProjectRootPath())\n            ->withOutputTransformer(\n                $this->createOutputTransformer($xmlfile, $buildConfig->getProjectConfiguration()->getProjectRootPath())\n            )\n            ->build();\n    }\n\n    /**\n     * Process the directory list.\n     *\n     * @param array $directories The directory list.\n     *\n     * @return array\n     */\n    private function processDirectories(array $directories): array\n    {\n        $should  = [];\n        $exclude = [];\n        foreach ($directories as $directory => $dirConfig) {\n            $should[] = $directory;\n            if (null !== $dirConfig) {\n                if (isset($dirConfig['excluded'])) {\n                    foreach ($dirConfig['excluded'] as $excl) {\n                        $exclude[] = $directory . '/' . $excl;\n                    }\n                }\n            }\n        }\n        return [$should, $exclude];\n    }\n\n    private function commaValues(array $config, string $key): string\n    {\n        if (!isset($config[$key])) {\n            return '';\n        }\n        return implode(',', (array) $config[$key]);\n    }\n\n    private function createOutputTransformer(string $xmlFile, string $rootDir): OutputTransformerFactoryInterface\n    {\n        return new class ($xmlFile, $rootDir) implements OutputTransformerFactoryInterface {\n            private $xmlFile;\n            private $rootDir;\n\n            public function __construct(string $xmlFile, string $rootDir)\n            {\n                $this->xmlFile = $xmlFile;\n                $this->rootDir = $rootDir;\n            }\n\n            public function createFor(ToolReportInterface $report): OutputTransformerInterface\n            {\n                return new class ($this->xmlFile, $this->rootDir, $report) implements OutputTransformerInterface {\n                    /** @var string */\n                    private $xmlFile;\n                    /** @var string */\n                    private $rootDir;\n                    /** @var ToolReportInterface */\n                    private $report;\n\n                    public function __construct(string $xmlFile, string $rootDir, ToolReportInterface $report)\n                    {\n                        $this->xmlFile = $xmlFile;\n                        $this->rootDir = $rootDir;\n                        $this->report  = $report;\n                    }\n\n\n                    public function write(string $data, int $channel): void\n                    {\n                        // FIXME: do we also want to parse stdout/stderr?\n                    }\n\n                    public function finish(int $exitCode): void\n                    {\n                        $xmlDocument = new DOMDocument('1.0');\n                        $xmlDocument->load($this->xmlFile);\n                        $rootNode = $xmlDocument->firstChild;\n\n                        if (!$rootNode instanceof DOMNode) {\n                            $this->report->close(\n                                $exitCode === 0 ? ReportInterface::STATUS_PASSED : ReportInterface::STATUS_FAILED\n                            );\n                            return;\n                        }\n\n                        foreach ($rootNode->childNodes as $childNode) {\n                            if (!$childNode instanceof DOMElement || $childNode->nodeName !== 'file') {\n                                continue;\n                            }\n\n                            $fileName = $childNode->getAttribute('name');\n                            if (strpos($fileName, $this->rootDir) === 0) {\n                                $fileName = substr($fileName, strlen($this->rootDir) + 1);\n                            }\n\n                            foreach ($childNode->childNodes as $violationNode) {\n                                if (!$violationNode instanceof DOMElement) {\n                                    continue;\n                                }\n\n                                /*\n                                 * <violation> may have:\n                                 * beginline: starting line of the issue.\n                                 * endline:   ending line of the issue.\n                                 * rule:      name of the rule.\n                                 * ruleset:   name of the ruleset the rule is defined within.\n                                 * package:   namespace of the class where the issue is within.\n                                 * class:     name of the class where the issue is within.\n                                 * method:    name of the method where the issue is within.\n                                 * externalInfoUrl: external URL describing the violation.\n                                 * priority: The priority for the rule.\n                                 *           This can be a value in the range 1-5, where 1 is the highest priority and\n                                 *           5 the lowest priority.\n                                 */\n\n                                $message = sprintf(\n                                    '%s%s(Ruleset: %s, %s)',\n                                    trim($violationNode->textContent),\n                                    \"\\n\",\n                                    (string) $this->getXmlAttribute($violationNode, 'ruleset', ''),\n                                    (string) $this->getXmlAttribute($violationNode, 'externalInfoUrl', '')\n                                );\n\n                                $severity = ToolReportInterface::SEVERITY_ERROR;\n                                if (null !== $prio = $this->getIntXmlAttribute($violationNode, 'priority')) {\n                                    // FIXME: Is this mapping correct?\n                                    switch ($prio) {\n                                        case 1:\n                                        case 2:\n                                        case 3:\n                                            $severity = ToolReportInterface::SEVERITY_ERROR;\n                                            break;\n                                        case 4:\n                                            $severity = ToolReportInterface::SEVERITY_WARNING;\n                                            break;\n                                        case 5:\n                                        default:\n                                            $severity = ToolReportInterface::SEVERITY_INFO;\n                                    }\n                                }\n\n                                $beginLine = $this->getIntXmlAttribute($violationNode, 'beginline');\n                                $endLine   = $this->getIntXmlAttribute($violationNode, 'endline');\n                                $this->report->addDiagnostic($severity, $message)\n                                    ->forFile($fileName)\n                                        ->forRange(\n                                            (int) $this->getIntXmlAttribute($violationNode, 'beginline'),\n                                            null,\n                                            $endLine !== $beginLine ? $endLine : null,\n                                        )\n                                        ->end()\n                                    ->fromSource((string) $this->getXmlAttribute($violationNode, 'rule'))\n                                    ->end();\n                            }\n                        }\n\n                        $this->report->addAttachment('pmd.xml')\n                                ->fromFile($this->xmlFile)\n                                ->setMimeType('application/xml')\n                            ->end();\n\n                        $this->report->close(\n                            $exitCode === 0\n                                ? ReportInterface::STATUS_PASSED\n                                : ReportInterface::STATUS_FAILED\n                        );\n                    }\n\n                    /**\n                     * @param mixed $defaultValue\n                     */\n                    private function getXmlAttribute(\n                        DOMElement $element,\n                        string $attribute,\n                        ?string $defaultValue = null\n                    ): ?string {\n                        if ($element->hasAttribute($attribute)) {\n                            return $element->getAttribute($attribute);\n                        }\n\n                        return $defaultValue;\n                    }\n\n                    private function getIntXmlAttribute(DOMElement $element, string $attribute): ?int\n                    {\n                        $value = $this->getXmlAttribute($element, $attribute);\n                        if ($value === null) {\n                            return null;\n                        }\n\n                        return (int) $value;\n                    }\n                };\n            }\n        };\n    }\n};\n"}},"phars":{"phpmd":[{"version":"2.6.1","phar-url":"https://github.com/phpmd/phpmd/releases/download/2.6.1/phpmd.phar","bootstrap":"bootstrap-0","requirements":{"php":">=5.3.9","ext-xml":"*"},"hash":null,"signature":null},{"version":"2.7.0","phar-url":"https://github.com/phpmd/phpmd/releases/download/2.7.0/phpmd.phar","bootstrap":"bootstrap-0","requirements":{"php":">=5.3.9","ext-xml":"*"},"hash":null,"signature":"https://github.com/phpmd/phpmd/releases/download/2.7.0/phpmd.phar.asc"},{"version":"2.8.0-beta.1","phar-url":"https://github.com/phpmd/phpmd/releases/download/2.8.0-beta.1/phpmd.phar","bootstrap":"bootstrap-0","requirements":{"php":">=5.3.9","ext-xml":"*"},"hash":null,"signature":null},{"version":"2.8.0-beta.2","phar-url":"https://github.com/phpmd/phpmd/releases/download/2.8.0-beta.2/phpmd.phar","bootstrap":"bootstrap-0","requirements":{"php":">=5.3.9","ext-xml":"*"},"hash":null,"signature":null},{"version":"2.8.0","phar-url":"https://github.com/phpmd/phpmd/releases/download/2.8.0/phpmd.phar","bootstrap":"bootstrap-0","requirements":{"php":">=5.3.9","ext-xml":"*"},"hash":null,"signature":null},{"version":"2.8.1","phar-url":"https://github.com/phpmd/phpmd/releases/download/2.8.1/phpmd.phar","bootstrap":"bootstrap-0","requirements":{"php":">=5.3.9","ext-xml":"*"},"hash":null,"signature":null},{"version":"2.8.2","phar-url":"https://github.com/phpmd/phpmd/releases/download/2.8.2/phpmd.phar","bootstrap":"bootstrap-0","requirements":{"php":">=5.3.9","ext-xml":"*"},"hash":null,"signature":null}]}}