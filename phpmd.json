{"bootstraps":{"bootstrap-0":{"plugin-version":"1.0.0","type":"inline","code":"<?php\n\n/**\n * Tool home: https://github.com/phpmd/phpmd\n */\n\nuse Phpcq\\PluginApi\\Version10\\BuildConfigInterface;\nuse Phpcq\\PluginApi\\Version10\\ConfigurationOptionsBuilderInterface;\nuse Phpcq\\PluginApi\\Version10\\ConfigurationPluginInterface;\n\nreturn new class implements ConfigurationPluginInterface {\n    public function getName(): string\n    {\n        return 'phpmd';\n    }\n\n    public function describeOptions(ConfigurationOptionsBuilderInterface $configOptionsBuilder): void\n    {\n        $configOptionsBuilder->describeStringOption(\n            'format',\n            'Output format to use (ansi, html, json, text, xml).',\n            'text'\n        );\n\n        $configOptionsBuilder->describeArrayOption(\n            'ruleset',\n            'List of rulesets (cleancode, codesize, controversial, design, naming, unusedcode).',\n            [\n                'naming',\n                'unusedcode'\n            ]\n        );\n\n        $configOptionsBuilder->describeStringOption(\n            'custom_flags',\n            'Any custom flags to pass to phpmd.'\n        );\n\n        $configOptionsBuilder->describeArrayOption(\n            'directories',\n            'Source directories to be analyzed with phpmd.'\n        );\n    }\n\n\n    public function processConfig(array $config, BuildConfigInterface $buildConfig): iterable\n    {\n        [$should, $excluded] = $this->processDirectories($config['directories']);\n\n        $flags = [\n            'format' => 'text',\n            'ruleset' => 'naming,unusedcode',\n        ];\n\n        foreach ($flags as $key => $value) {\n            if ('' !== ($value = $this->commaValues($config, $key))) {\n                $flags[$key] = $value;\n            }\n        }\n\n        $args = [\n            implode(',', $should),\n            $flags['format'],\n            $flags['ruleset'],\n        ];\n\n        if ([] !== $excluded) {\n            $exclude = [];\n            foreach ($excluded as $path) {\n                if ('' === ($path = trim($path))) {\n                    continue;\n                }\n                $exclude[] = $path;\n            }\n            $args[] = '--exclude=' . implode(',', $exclude);\n        }\n        if ('' !== ($values = $config['custom_flags'] ?? '')) {\n            $args[] = $values;\n        }\n\n        yield $buildConfig\n            ->getTaskFactory()\n            ->buildRunPhar('phpmd', $args)\n            ->withWorkingDirectory($buildConfig->getProjectConfiguration()->getProjectRootPath())\n            ->build();\n    }\n\n    /**\n     * Process the directory list.\n     *\n     * @param array $directories The directory list.\n     *\n     * @return array\n     */\n    private function processDirectories(array $directories): array\n    {\n        $should  = [];\n        $exclude = [];\n        foreach ($directories as $directory => $dirConfig) {\n            $should[] = $directory;\n            if (null !== $dirConfig) {\n                if (isset($dirConfig['excluded'])) {\n                    foreach ($dirConfig['excluded'] as $excl) {\n                        $exclude[] = $directory . '/' . $excl;\n                    }\n                }\n            }\n        }\n        return [$should, $exclude];\n    }\n\n    private function commaValues(array $config, string $key): string\n    {\n        if (!isset($config[$key])) {\n            return '';\n        }\n        return implode(',', (array) $config[$key]);\n    }\n};\n"}},"phars":{"phpmd":[{"version":"2.6.1","phar-url":"https://github.com/phpmd/phpmd/releases/download/2.6.1/phpmd.phar","bootstrap":"bootstrap-0","requirements":{"php":">=5.3.9","ext-xml":"*"},"hash":null,"signature":null},{"version":"2.7.0","phar-url":"https://github.com/phpmd/phpmd/releases/download/2.7.0/phpmd.phar","bootstrap":"bootstrap-0","requirements":{"php":">=5.3.9","ext-xml":"*"},"hash":null,"signature":"https://github.com/phpmd/phpmd/releases/download/2.7.0/phpmd.phar.asc"},{"version":"2.8.0-beta.1","phar-url":"https://github.com/phpmd/phpmd/releases/download/2.8.0-beta.1/phpmd.phar","bootstrap":"bootstrap-0","requirements":{"php":">=5.3.9","ext-xml":"*"},"hash":null,"signature":null},{"version":"2.8.0-beta.2","phar-url":"https://github.com/phpmd/phpmd/releases/download/2.8.0-beta.2/phpmd.phar","bootstrap":"bootstrap-0","requirements":{"php":">=5.3.9","ext-xml":"*"},"hash":null,"signature":null},{"version":"2.8.0","phar-url":"https://github.com/phpmd/phpmd/releases/download/2.8.0/phpmd.phar","bootstrap":"bootstrap-0","requirements":{"php":">=5.3.9","ext-xml":"*"},"hash":null,"signature":null},{"version":"2.8.1","phar-url":"https://github.com/phpmd/phpmd/releases/download/2.8.1/phpmd.phar","bootstrap":"bootstrap-0","requirements":{"php":">=5.3.9","ext-xml":"*"},"hash":null,"signature":null},{"version":"2.8.2","phar-url":"https://github.com/phpmd/phpmd/releases/download/2.8.2/phpmd.phar","bootstrap":"bootstrap-0","requirements":{"php":">=5.3.9","ext-xml":"*"},"hash":null,"signature":null}]}}