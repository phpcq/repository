{"bootstraps":{"bootstrap-0":{"plugin-version":"1.0.0","type":"inline","code":"<?php\n\n/**\n * Tool home: https://github.com/sebastianbergmann/phpcpd\n */\n\ndeclare(strict_types=1);\n\nuse Phpcq\\PluginApi\\Version10\\Configuration\\PluginConfigurationBuilderInterface;\nuse Phpcq\\PluginApi\\Version10\\Configuration\\PluginConfigurationInterface;\nuse Phpcq\\PluginApi\\Version10\\DiagnosticsPluginInterface;\nuse Phpcq\\PluginApi\\Version10\\EnvironmentInterface;\nuse Phpcq\\PluginApi\\Version10\\Exception\\InvalidConfigurationException;\nuse Phpcq\\PluginApi\\Version10\\Output\\OutputTransformerFactoryInterface;\nuse Phpcq\\PluginApi\\Version10\\Output\\OutputTransformerInterface;\nuse Phpcq\\PluginApi\\Version10\\Report\\TaskReportInterface;\n\nreturn new class implements DiagnosticsPluginInterface {\n    public function getName(): string\n    {\n        return 'phpcpd';\n    }\n\n    public function describeConfiguration(PluginConfigurationBuilderInterface $configOptionsBuilder): void\n    {\n        $configOptionsBuilder->supportDirectories();\n        $configOptionsBuilder\n            ->describeStringListOption('names', 'A list of file names to check.')\n            ->isRequired()\n            ->withDefaultValue(['*.php']);\n\n        $configOptionsBuilder\n            ->describeStringListOption('names_exclude', 'A list of file names to exclude.');\n\n        $configOptionsBuilder->describeStringListOption(\n            'regexps_exclude',\n            'A list of paths regexps to exclude (example: \"#var/.*_tmp#\")'\n        );\n\n        $configOptionsBuilder\n            ->describeIntOption('min_lines', 'Minimum number of identical lines.')\n            ->isRequired()\n            ->withDefaultValue(5);\n\n        $configOptionsBuilder\n            ->describeIntOption('min_tokens', 'Minimum number of identical tokens.')\n            ->isRequired()\n            ->withDefaultValue(70);\n\n        $configOptionsBuilder\n            ->describeBoolOption('fuzzy', 'Fuzz variable names')\n            ->isRequired()\n            ->withDefaultValue(false);\n\n        $configOptionsBuilder\n            ->describeStringListOption(\n                'custom_flags',\n                'Any custom flags to pass to phpcpd. For valid flags refer to the phpcpd documentation.'\n            )\n            ->withDefaultValue([])\n            ->isRequired();\n\n        $severityText = implode('\", \"', [\n            TaskReportInterface::SEVERITY_NONE,\n            TaskReportInterface::SEVERITY_INFO,\n            TaskReportInterface::SEVERITY_MARGINAL,\n            TaskReportInterface::SEVERITY_MINOR,\n            TaskReportInterface::SEVERITY_MAJOR,\n            TaskReportInterface::SEVERITY_FATAL,\n        ]);\n\n        $configOptionsBuilder\n            ->describeStringOption(\n                'severity',\n                'Severity for detected duplications. Must be one of \"' . $severityText . '\"',\n            )\n            ->isRequired()\n            ->withDefaultValue(TaskReportInterface::SEVERITY_MINOR);\n    }\n\n    public function createDiagnosticTasks(\n        PluginConfigurationInterface $config,\n        EnvironmentInterface $buildConfig\n    ): iterable {\n        $args = [\n            '--log-pmd',\n            $logFile = $buildConfig->getUniqueTempFile($this, 'pmd-cpd.xml')\n        ];\n\n        if ($config->has('names')) {\n            $args[] = '--names=' . implode(',', $config->getStringList('names'));\n        }\n        if ($config->has('names_exclude')) {\n            $args[] = '--names-exclude=' . implode(',', $config->getStringList('names_exclude'));\n        }\n        if ($config->has('regexps_exclude')) {\n            $args[] = '--regexps-exclude';\n            $args[] = implode(',', $config->getStringList('regexps_exclude'));\n        }\n        $args[] = '--min-lines=' . (string) $config->getInt('min_lines');\n        $args[] = '--min-tokens=' . (string) $config->getInt('min_tokens');\n\n        if ($config->getBool('fuzzy')) {\n            $args[] = '--fuzzy';\n        }\n\n        if ($config->has('custom_flags')) {\n            foreach ($config->getStringList('custom_flags') as $value) {\n                if (strpos($value, '--log-pmd') >= 0) {\n                    throw new InvalidConfigurationException('Configuring a custom log file is not allowed.');\n                }\n                $args[] = $value;\n            }\n        }\n\n        $rootDir  = $buildConfig->getProjectConfiguration()->getProjectRootPath();\n        $severity = $config->getString('severity');\n\n        yield $buildConfig\n            ->getTaskFactory()\n            ->buildRunPhar('phpcpd', array_merge($args, $config->getStringList('directories')))\n            ->withOutputTransformer($this->createOutputTransformer($logFile, $rootDir, $severity))\n            ->withWorkingDirectory($buildConfig->getProjectConfiguration()->getProjectRootPath())\n            ->build();\n    }\n\n    private function createOutputTransformer(\n        string $xmlFile,\n        string $rootDir,\n        string $severity\n    ): OutputTransformerFactoryInterface {\n        return new class ($xmlFile, $rootDir, $severity) implements OutputTransformerFactoryInterface {\n            /** @var string */\n            private $xmlFile;\n\n            /** @var string */\n            private $rootDir;\n\n            /** @var string */\n            private $severity;\n\n            public function __construct(string $xmlFile, string $rootDir, string $severity)\n            {\n                $this->xmlFile  = $xmlFile;\n                $this->rootDir  = $rootDir;\n                $this->severity = $severity;\n            }\n\n            public function createFor(TaskReportInterface $report): OutputTransformerInterface\n            {\n                return new class (\n                    $this->xmlFile,\n                    $report,\n                    $this->rootDir,\n                    $this->severity\n                ) implements OutputTransformerInterface {\n                    /** @var string */\n                    private $xmlFile;\n                    /** @var TaskReportInterface */\n                    private $report;\n                    /** @var string */\n                    private $rootDir;\n                    /** @var string */\n                    private $severity;\n\n                    public function __construct(\n                        string $xmlFile,\n                        TaskReportInterface $report,\n                        string $rootDir,\n                        string $severity\n                    ) {\n                        $this->xmlFile = $xmlFile;\n                        $this->report  = $report;\n                        if ('/' !== substr($rootDir, -1)) {\n                            $rootDir .= '/';\n                        }\n                        $this->rootDir = $rootDir;\n                        $this->severity = $severity;\n                    }\n\n                    public function write(string $data, int $channel): void\n                    {\n                    }\n\n                    public function finish(int $exitCode): void\n                    {\n                        $xmlDocument = new DOMDocument('1.0');\n                        $xmlDocument->load($this->xmlFile);\n                        $rootNode = $xmlDocument->firstChild;\n\n                        if (!$rootNode instanceof DOMNode) {\n                            $this->report->close(\n                                $exitCode === 0\n                                    ? TaskReportInterface::STATUS_PASSED\n                                    : TaskReportInterface::STATUS_FAILED\n                            );\n                            return;\n                        }\n\n                        foreach ($rootNode->childNodes as $childNode) {\n                            if (!$childNode instanceof DOMElement) {\n                                continue;\n                            }\n\n                            $message = 'Duplicate code fragment';\n                            $taskReport = $this->report->addDiagnostic($this->severity, $message);\n                            $numberOfLines = (int) $childNode->getAttribute('lines');\n\n                            /** @var DOMElement $fileNode */\n                            foreach ($childNode->getElementsByTagName('file') as $fileNode) {\n                                $line = (int) $fileNode->getAttribute('line');\n                                $taskReport\n                                    ->forFile($this->getFileName($fileNode))\n                                    ->forRange($line, null, ($line + $numberOfLines));\n                            }\n                        }\n\n                        $this->report->addAttachment('phpcpd.xml')\n                            ->fromFile($this->xmlFile)\n                            ->setMimeType('application/xml')\n                            ->end();\n\n                        $this->report->close(\n                            $exitCode === 0\n                                ? TaskReportInterface::STATUS_PASSED\n                                : TaskReportInterface::STATUS_FAILED\n                        );\n                    }\n\n                    private function getFileName(DOMElement $element): string\n                    {\n                        $fileName = $element->getAttribute('path');\n                        if (strpos($fileName, $this->rootDir) === 0) {\n                            $fileName = substr($fileName, strlen($this->rootDir));\n                        }\n\n                        return $fileName;\n                    }\n                };\n            }\n        };\n    }\n};\n","hash":{"type":"sha-512","value":"f2c7998aeee384d670738b19d085f736704f1c80ab136a6c3e111c193efd22c02b54f504453e6e64253d0951bb487fbd0c2a5bb6906e3ed08d52945d60635406"}}},"phars":{"phpcpd":[{"version":"5.0.2","phar-url":"https://phar.phpunit.de/phpcpd-5.0.2.phar","bootstrap":"bootstrap-0","requirements":{"php":"^7.3","ext-dom":"*"},"hash":{"type":"sha-256","value":"12e94af9928be2f33fd394d2cc5d96b3925de24d614381d06b3096cc9eeabbcb"},"signature":"https://phar.phpunit.de/phpcpd-5.0.2.phar.asc"},{"version":"5.0.1","phar-url":"https://phar.phpunit.de/phpcpd-5.0.1.phar","bootstrap":"bootstrap-0","requirements":{"php":"^7.3","ext-dom":"*"},"hash":{"type":"sha-256","value":"26c4813a4737adb6406a1314cb34da25dc8dc5c2bb86f672b03515d2f7316296"},"signature":"https://phar.phpunit.de/phpcpd-5.0.1.phar.asc"},{"version":"5.0.0","phar-url":"https://phar.phpunit.de/phpcpd-5.0.0.phar","bootstrap":"bootstrap-0","requirements":{"php":"^7.3","ext-dom":"*"},"hash":{"type":"sha-256","value":"935b8f29026306615eb9fe57ea7991ce4c45c660cfd766d9ce1330810759f54c"},"signature":"https://phar.phpunit.de/phpcpd-5.0.0.phar.asc"},{"version":"4.1.0","phar-url":"https://phar.phpunit.de/phpcpd-4.1.0.phar","bootstrap":"bootstrap-0","requirements":{"php":"^7.1","ext-dom":"*"},"hash":{"type":"sha-256","value":"5918d1d764227c35b590769a1416c799619f7b864f5659b4eab7dd214af530ea"},"signature":"https://phar.phpunit.de/phpcpd-4.1.0.phar.asc"},{"version":"4.0.0","phar-url":"https://phar.phpunit.de/phpcpd-4.0.0.phar","bootstrap":"bootstrap-0","requirements":{"php":"^7.1"},"hash":{"type":"sha-256","value":"e406841a9839179953998b3b1d2c3db848920c194c7204f3e603d7aead98bab9"},"signature":"https://phar.phpunit.de/phpcpd-4.0.0.phar.asc"},{"version":"3.0.1","phar-url":"https://phar.phpunit.de/phpcpd-3.0.1.phar","bootstrap":"bootstrap-0","requirements":{"php":"^5.6|^7.0"},"hash":{"type":"sha-256","value":"47ff2771b952578c4664dec631dc8720bb3f51f707e13ec9a9d52857b7b63c37"},"signature":"https://phar.phpunit.de/phpcpd-3.0.1.phar.asc"},{"version":"3.0.0","phar-url":"https://phar.phpunit.de/phpcpd-3.0.0.phar","bootstrap":"bootstrap-0","requirements":{"php":"^5.6|^7.0"},"hash":{"type":"sha-256","value":"bc03385966b4bd1e62d717cb746c347401b995a23f0f2c0c72bf78016bb039d3"},"signature":"https://phar.phpunit.de/phpcpd-3.0.0.phar.asc"}]}}