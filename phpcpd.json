{"bootstraps":{"bootstrap-0":{"plugin-version":"1.0.0","type":"inline","code":"<?php\n\n/**\n * Tool home: https://github.com/sebastianbergmann/phpcpd\n */\n\ndeclare(strict_types=1);\n\nuse Phpcq\\PluginApi\\Version10\\BuildConfigInterface;\nuse Phpcq\\PluginApi\\Version10\\ConfigurationOptionsBuilderInterface;\nuse Phpcq\\PluginApi\\Version10\\ConfigurationPluginInterface;\nuse Phpcq\\PluginApi\\Version10\\InvalidConfigException;\nuse Phpcq\\PluginApi\\Version10\\OutputTransformerFactoryInterface;\nuse Phpcq\\PluginApi\\Version10\\OutputTransformerInterface;\nuse Phpcq\\PluginApi\\Version10\\ReportInterface;\nuse Phpcq\\PluginApi\\Version10\\ToolReportInterface;\n\nreturn new class implements ConfigurationPluginInterface {\n    public function getName(): string\n    {\n        return 'phpcpd';\n    }\n\n    public function describeOptions(ConfigurationOptionsBuilderInterface $configOptionsBuilder): void\n    {\n        $configOptionsBuilder->describeArrayOption(\n            'names',\n            'A list of file names to check.',\n            ['*.php']\n        );\n\n        $configOptionsBuilder->describeArrayOption(\n            'names_exclude',\n            'A list of file names to exclude.'\n        );\n\n        $configOptionsBuilder->describeArrayOption(\n            'regexps_exclude',\n            'A list of paths regexps to exclude (example: \"#var/.*_tmp#\")'\n        );\n\n        $configOptionsBuilder->describeIntOption(\n            'min_lines',\n            'Minimum number of identical lines.',\n            5\n        );\n\n        $configOptionsBuilder->describeIntOption(\n            'min_tokens',\n            'Minimum number of identical tokens.',\n            70\n        );\n\n        $configOptionsBuilder->describeBoolOption(\n            'fuzzy',\n            'Fuzz variable names',\n            false\n        );\n\n        $configOptionsBuilder->describeArrayOption(\n            'custom_flags',\n            'Any custom flags to pass to phpcpd. For valid flags refer to the phpcpd documentation.'\n        );\n\n        $configOptionsBuilder->describeArrayOption(\n            'directories',\n            'Source directories to be analyzed with phpcpd.'\n        );\n\n        $configOptionsBuilder->describeStringOption(\n            'severity',\n            'Severity for detected duplications. Must be one of \"' . ToolReportInterface::SEVERITY_INFO . '\", \"'\n            . ToolReportInterface::SEVERITY_NOTICE . '\", \"' . ToolReportInterface::SEVERITY_WARNING . '\" or \"'\n            . ToolReportInterface::SEVERITY_ERROR . '\"',\n            ToolReportInterface::SEVERITY_WARNING\n        );\n    }\n\n    public function processConfig(array $toolConfig, BuildConfigInterface $buildConfig): iterable\n    {\n        foreach ($this->processDirectories($toolConfig) as $config) {\n            $args = [\n                '--log-pmd',\n                $logFile = $buildConfig->getUniqueTempFile($this, 'pmd-cpd.xml')\n            ];\n\n            if ('' !== ($values = $this->commaValues($config, 'names'))) {\n                $args[] = '--names=' . $values;\n            }\n            if ('' !== ($values = $this->commaValues($config, 'names_exclude'))) {\n                $args[] = '--names-exclude=' . $values;\n            }\n            if ('' !== ($values = $this->commaValues($config, 'regexps_exclude'))) {\n                $args[] = '--regexps-exclude';\n                $args[] = $values;\n            }\n            if ('' !== ($values = $config['min_lines'] ?? '')) {\n                $args[] = '--min-lines=' . $values;\n            }\n            if ('' !== ($values = $config['min_tokens'] ?? '')) {\n                $args[] = '--min-tokens=' . $values;\n            }\n            if ($config['fuzzy'] ?? false) {\n                $args[] = '--fuzzy';\n            }\n\n            if ([] !== ($values = $config['custom_flags'] ?? [])) {\n                foreach ($values as $value) {\n                    if (strpos($value, '--log-pmd') >= 0) {\n                        throw new InvalidConfigException('Configuring a custom log file is not allowed.');\n                    }\n                    $args[] = (string) $value;\n                }\n            }\n\n            $rootDir  = $buildConfig->getProjectConfiguration()->getProjectRootPath();\n            $severity = $config['severity'] ?? ToolReportInterface::SEVERITY_WARNING;\n\n            yield $buildConfig\n                ->getTaskFactory()\n                ->buildRunPhar('phpcpd', array_merge($args, array_values($config['directories'])))\n                ->withOutputTransformer($this->createOutputTransformer($logFile, $rootDir, $severity))\n                ->withWorkingDirectory($buildConfig->getProjectConfiguration()->getProjectRootPath())\n                ->build();\n        }\n    }\n\n    /**\n     * Process the directory list.\n     *\n     * @param array $toolConfig The tool configuration\n     *\n     * @return array\n     */\n    private function processDirectories(array $toolConfig): array\n    {\n        $configs = [\n            array_merge($toolConfig, ['directories' => []])\n        ];\n\n        foreach ($toolConfig['directories'] as $directory => $dirConfig) {\n            if (null === $dirConfig) {\n                $configs[0]['directories'][] = $directory;\n                continue;\n            }\n\n            $configs[] = array_merge(\n                $dirConfig,\n                ['directories' => [$directory]]\n            );\n        }\n\n        return $configs;\n    }\n\n    private function commaValues(array $config, string $key): string\n    {\n        if (!isset($config[$key])) {\n            return '';\n        }\n        return implode(',', (array) $config[$key]);\n    }\n\n    private function createOutputTransformer(\n        string $xmlFile,\n        string $rootDir,\n        string $severity\n    ): OutputTransformerFactoryInterface {\n        return new class ($xmlFile, $rootDir, $severity) implements OutputTransformerFactoryInterface {\n            /** @var string */\n            private $xmlFile;\n\n            /** @var string */\n            private $rootDir;\n\n            /** @var string */\n            private $severity;\n\n            public function __construct(string $xmlFile, string $rootDir, string $severity)\n            {\n                $this->xmlFile  = $xmlFile;\n                $this->rootDir  = $rootDir;\n                $this->severity = $severity;\n            }\n\n            public function createFor(ToolReportInterface $report): OutputTransformerInterface\n            {\n                return new class (\n                    $this->xmlFile,\n                    $report,\n                    $this->rootDir,\n                    $this->severity\n                ) implements OutputTransformerInterface {\n                    /** @var string */\n                    private $xmlFile;\n                    /** @var ToolReportInterface */\n                    private $report;\n                    /** @var string */\n                    private $rootDir;\n                    /** @var string */\n                    private $severity;\n\n                    public function __construct(\n                        string $xmlFile,\n                        ToolReportInterface $report,\n                        string $rootDir,\n                        string $severity\n                    ) {\n                        $this->xmlFile = $xmlFile;\n                        $this->report  = $report;\n                        if ('/' !== substr($rootDir, -1)) {\n                            $rootDir .= '/';\n                        }\n                        $this->rootDir = $rootDir;\n                        $this->severity = $severity;\n                    }\n\n                    public function write(string $data, int $channel): void\n                    {\n                    }\n\n                    public function finish(int $exitCode): void\n                    {\n                        $xmlDocument = new DOMDocument('1.0');\n                        $xmlDocument->load($this->xmlFile);\n                        $rootNode = $xmlDocument->firstChild;\n\n                        if (!$rootNode instanceof DOMNode) {\n                            $this->report->close(\n                                $exitCode === 0 ? ReportInterface::STATUS_PASSED : ReportInterface::STATUS_FAILED\n                            );\n                            return;\n                        }\n\n                        foreach ($rootNode->childNodes as $childNode) {\n                            if (!$childNode instanceof DOMElement) {\n                                continue;\n                            }\n\n                            $message = 'Duplicate code fragment';\n                            $toolReport = $this->report->addDiagnostic($this->severity, $message);\n                            $numberOfLines = (int) $childNode->getAttribute('lines');\n\n                            /** @var DOMElement $fileNode */\n                            foreach ($childNode->getElementsByTagName('file') as $fileNode) {\n                                $line = (int) $fileNode->getAttribute('line');\n                                $toolReport\n                                    ->forFile($this->getFileName($fileNode))\n                                    ->forRange($line, null, ($line + $numberOfLines));\n                            }\n                        }\n\n                        $this->report->addAttachment('phpcpd.xml')\n                            ->fromFile($this->xmlFile)\n                            ->setMimeType('application/xml')\n                            ->end();\n\n                        $this->report->close(\n                            $exitCode === 0\n                                ? ReportInterface::STATUS_PASSED\n                                : ReportInterface::STATUS_FAILED\n                        );\n                    }\n\n                    private function getFileName(DOMElement $element): string\n                    {\n                        $fileName = $element->getAttribute('path');\n                        if (strpos($fileName, $this->rootDir) === 0) {\n                            $fileName = substr($fileName, strlen($this->rootDir));\n                        }\n\n                        return $fileName;\n                    }\n                };\n            }\n        };\n    }\n};\n"}},"phars":{"phpcpd":[{"version":"5.0.2","phar-url":"https://phar.phpunit.de/phpcpd-5.0.2.phar","bootstrap":"bootstrap-0","requirements":{"php":"^7.3","ext-dom":"*"},"hash":{"type":"sha-256","value":"12e94af9928be2f33fd394d2cc5d96b3925de24d614381d06b3096cc9eeabbcb"},"signature":"https://phar.phpunit.de/phpcpd-5.0.2.phar.asc"},{"version":"5.0.1","phar-url":"https://phar.phpunit.de/phpcpd-5.0.1.phar","bootstrap":"bootstrap-0","requirements":{"php":"^7.3","ext-dom":"*"},"hash":{"type":"sha-256","value":"26c4813a4737adb6406a1314cb34da25dc8dc5c2bb86f672b03515d2f7316296"},"signature":"https://phar.phpunit.de/phpcpd-5.0.1.phar.asc"},{"version":"5.0.0","phar-url":"https://phar.phpunit.de/phpcpd-5.0.0.phar","bootstrap":"bootstrap-0","requirements":{"php":"^7.3","ext-dom":"*"},"hash":{"type":"sha-256","value":"935b8f29026306615eb9fe57ea7991ce4c45c660cfd766d9ce1330810759f54c"},"signature":"https://phar.phpunit.de/phpcpd-5.0.0.phar.asc"},{"version":"4.1.0","phar-url":"https://phar.phpunit.de/phpcpd-4.1.0.phar","bootstrap":"bootstrap-0","requirements":{"php":"^7.1","ext-dom":"*"},"hash":{"type":"sha-256","value":"5918d1d764227c35b590769a1416c799619f7b864f5659b4eab7dd214af530ea"},"signature":"https://phar.phpunit.de/phpcpd-4.1.0.phar.asc"},{"version":"4.0.0","phar-url":"https://phar.phpunit.de/phpcpd-4.0.0.phar","bootstrap":"bootstrap-0","requirements":{"php":"^7.1"},"hash":{"type":"sha-256","value":"e406841a9839179953998b3b1d2c3db848920c194c7204f3e603d7aead98bab9"},"signature":"https://phar.phpunit.de/phpcpd-4.0.0.phar.asc"},{"version":"3.0.1","phar-url":"https://phar.phpunit.de/phpcpd-3.0.1.phar","bootstrap":"bootstrap-0","requirements":{"php":"^5.6|^7.0"},"hash":{"type":"sha-256","value":"47ff2771b952578c4664dec631dc8720bb3f51f707e13ec9a9d52857b7b63c37"},"signature":"https://phar.phpunit.de/phpcpd-3.0.1.phar.asc"},{"version":"3.0.0","phar-url":"https://phar.phpunit.de/phpcpd-3.0.0.phar","bootstrap":"bootstrap-0","requirements":{"php":"^5.6|^7.0"},"hash":{"type":"sha-256","value":"bc03385966b4bd1e62d717cb746c347401b995a23f0f2c0c72bf78016bb039d3"},"signature":"https://phar.phpunit.de/phpcpd-3.0.0.phar.asc"},{"version":"2.0.4","phar-url":"https://phar.phpunit.de/phpcpd-2.0.4.phar","bootstrap":"bootstrap-0","requirements":{},"hash":{"type":"sha-256","value":"491eeac71f1421395648ff079b60fe4858217b70d66eaa07644351f2699c38fe"},"signature":"https://phar.phpunit.de/phpcpd-2.0.4.phar.asc"},{"version":"2.0.3","phar-url":"https://phar.phpunit.de/phpcpd-2.0.3.phar","bootstrap":"bootstrap-0","requirements":{},"hash":{"type":"sha-256","value":"0fd6826f477922c3e102e4bb142cee97485d0c05f87c24046c7e788db32c1fce"},"signature":"https://phar.phpunit.de/phpcpd-2.0.3.phar.asc"},{"version":"2.0.2","phar-url":"https://phar.phpunit.de/phpcpd-2.0.2.phar","bootstrap":"bootstrap-0","requirements":{},"hash":{"type":"sha-256","value":"8a45aa560e332e663d6c6ac10e1ba543410b748467bdc62724ca6b530b760ca6"},"signature":"https://phar.phpunit.de/phpcpd-2.0.2.phar.asc"},{"version":"2.0.1","phar-url":"https://phar.phpunit.de/phpcpd-2.0.1.phar","bootstrap":"bootstrap-0","requirements":{},"hash":{"type":"sha-256","value":"3060ec805184c4cc31c45a81d456f74dcca9ca05efa662442ef9bf74ffa86e7c"},"signature":"https://phar.phpunit.de/phpcpd-2.0.1.phar.asc"},{"version":"2.0.0","phar-url":"https://phar.phpunit.de/phpcpd-2.0.0.phar","bootstrap":"bootstrap-0","requirements":{},"hash":{"type":"sha-256","value":"ea4856166beb0dace104124deece3f6d43b9af6dbfe44e0bb41f45aba1d85b26"},"signature":"https://phar.phpunit.de/phpcpd-2.0.0.phar.asc"},{"version":"1.4.3","phar-url":"https://phar.phpunit.de/phpcpd-1.4.3.phar","bootstrap":"bootstrap-0","requirements":{},"hash":{"type":"sha-256","value":"4a840653b5402d58b2a5401e710f0e8b5e42b7225b6fde87226427541789a324"},"signature":"https://phar.phpunit.de/phpcpd-1.4.3.phar.asc"},{"version":"1.4.2","phar-url":"https://phar.phpunit.de/phpcpd-1.4.2.phar","bootstrap":"bootstrap-0","requirements":{},"hash":{"type":"sha-256","value":"fce748e5b0bb97bce3f3a44d4061b84ece99a1aa8913db72f747b5837d4c1428"},"signature":"https://phar.phpunit.de/phpcpd-1.4.2.phar.asc"},{"version":"1.4.0","phar-url":"https://phar.phpunit.de/phpcpd-1.4.0.phar","bootstrap":"bootstrap-0","requirements":{},"hash":{"type":"sha-256","value":"d25b51608ef67165c4cbd6eb2fcf600450142fce3bd01a02969c6524c5db5f1e"},"signature":"https://phar.phpunit.de/phpcpd-1.4.0.phar.asc"}]}}