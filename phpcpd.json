{"bootstraps":{"bootstrap-0":{"plugin-version":"1.0.0","type":"inline","code":"<?php\n\n/**\n * Tool home: https://github.com/sebastianbergmann/phpcpd\n */\n\nuse Phpcq\\PluginApi\\Version10\\BuildConfigInterface;\nuse Phpcq\\PluginApi\\Version10\\ConfigurationOptionsBuilderInterface;\nuse Phpcq\\PluginApi\\Version10\\ConfigurationPluginInterface;\n\nreturn new class implements ConfigurationPluginInterface {\n    public function getName(): string\n    {\n        return 'phpcpd';\n    }\n\n    public function describeOptions(ConfigurationOptionsBuilderInterface $configOptionsBuilder): void\n    {\n        $configOptionsBuilder->describeArrayOption(\n            'names',\n            'A list of file names to check.',\n            ['*.php']\n        );\n\n        $configOptionsBuilder->describeArrayOption(\n            'names_exclude',\n            'A list of file names to exclude.'\n        );\n\n        $configOptionsBuilder->describeArrayOption(\n            'regexps_exclude',\n            'A list of paths regexps to exclude (example: \"#var/.*_tmp#\")'\n        );\n\n        $configOptionsBuilder->describeStringOption(\n            'log',\n            'Write result in PMD-CPD XML format to file'\n        );\n\n        $configOptionsBuilder->describeIntOption(\n            'min_lines',\n            'Minimum number of identical lines.',\n            5\n        );\n\n        $configOptionsBuilder->describeIntOption(\n            'min_tokens',\n            'Minimum number of identical tokens.',\n            70\n        );\n\n        $configOptionsBuilder->describeBoolOption(\n            'fuzzy',\n            'Fuzz variable names',\n            false\n        );\n\n        $configOptionsBuilder->describeArrayOption(\n            'custom_flags',\n            'Any custom flags to pass to phpcpd. For valid flags refer to the phpcpd documentation.'\n        );\n\n        $configOptionsBuilder->describeArrayOption(\n            'directories',\n            'Source directories to be analyzed with phpcpd.'\n        );\n    }\n\n    public function processConfig(array $config, BuildConfigInterface $buildConfig): iterable\n    {\n        [$should, $excluded] = $this->processDirectories($config['directories']);\n        $args = [];\n        if ([] !== $excluded) {\n            foreach ($excluded as $path) {\n                if ('' === ($path = trim($path))) {\n                    continue;\n                }\n                $args[] = '--exclude=' . $path;\n            }\n        }\n        if ('' !== ($values = $this->commaValues($config, 'names'))) {\n            $args[] = '--names=' . $values;\n        }\n        if ('' !== ($values = $this->commaValues($config, 'names_exclude'))) {\n            $args[] = '--names-exclude=' . $values;\n        }\n        if ('' !== ($values = $this->commaValues($config, 'regexps_exclude'))) {\n            $args[] = '--regexps-exclude=' . $values;\n        }\n        if ('' !== ($values = $config['log'] ?? '')) {\n            $args[] = '--log-pmd=' . $values;\n        }\n        if ('' !== ($values = $config['min_lines'] ?? '')) {\n            $args[] = '--min-lines=' . $values;\n        }\n        if ('' !== ($values = $config['min_tokens'] ?? '')) {\n            $args[] = '--min-tokens=' . $values;\n        }\n        if ($config['fuzzy'] ?? false) {\n            $args[] = '--fuzzy';\n        }\n\n        if ([] !== ($values = $config['custom_flags'] ?? [])) {\n            foreach ($values as $value) {\n                $args[] = (string) $value;\n            }\n        }\n\n        yield $buildConfig\n            ->getTaskFactory()\n            ->buildRunPhar('phpcpd', array_merge($args, $should))\n            ->withWorkingDirectory($buildConfig->getProjectConfiguration()->getProjectRootPath())\n            ->build();\n    }\n\n    /**\n     * Process the directory list.\n     *\n     * @param array $directories The directory list.\n     *\n     * @return array\n     */\n    private function processDirectories(array $directories): array\n    {\n        $should  = [];\n        $exclude = [];\n        foreach ($directories as $directory => $dirConfig) {\n            $should[] = $directory;\n            if (null !== $dirConfig) {\n                if (isset($dirConfig['excluded'])) {\n                    foreach ($dirConfig['excluded'] as $excl) {\n                        $exclude[] = $directory . '/' . $excl;\n                    }\n                }\n            }\n        }\n        return [$should, $exclude];\n    }\n\n    private function commaValues(array $config, string $key): string\n    {\n        if (!isset($config[$key])) {\n            return '';\n        }\n        return implode(',', (array) $config[$key]);\n    }\n};\n"}},"phars":{"phpcpd":[{"version":"5.0.2","phar-url":"https://phar.phpunit.de/phpcpd-5.0.2.phar","bootstrap":"bootstrap-0","requirements":{"php":"^7.3","ext-dom":"*"},"hash":{"type":"sha-256","value":"12e94af9928be2f33fd394d2cc5d96b3925de24d614381d06b3096cc9eeabbcb"},"signature":"https://phar.phpunit.de/phpcpd-5.0.2.phar.asc"},{"version":"5.0.1","phar-url":"https://phar.phpunit.de/phpcpd-5.0.1.phar","bootstrap":"bootstrap-0","requirements":{"php":"^7.3","ext-dom":"*"},"hash":{"type":"sha-256","value":"26c4813a4737adb6406a1314cb34da25dc8dc5c2bb86f672b03515d2f7316296"},"signature":"https://phar.phpunit.de/phpcpd-5.0.1.phar.asc"},{"version":"5.0.0","phar-url":"https://phar.phpunit.de/phpcpd-5.0.0.phar","bootstrap":"bootstrap-0","requirements":{"php":"^7.3","ext-dom":"*"},"hash":{"type":"sha-256","value":"935b8f29026306615eb9fe57ea7991ce4c45c660cfd766d9ce1330810759f54c"},"signature":"https://phar.phpunit.de/phpcpd-5.0.0.phar.asc"},{"version":"4.1.0","phar-url":"https://phar.phpunit.de/phpcpd-4.1.0.phar","bootstrap":"bootstrap-0","requirements":{"php":"^7.1","ext-dom":"*"},"hash":{"type":"sha-256","value":"5918d1d764227c35b590769a1416c799619f7b864f5659b4eab7dd214af530ea"},"signature":"https://phar.phpunit.de/phpcpd-4.1.0.phar.asc"},{"version":"4.0.0","phar-url":"https://phar.phpunit.de/phpcpd-4.0.0.phar","bootstrap":"bootstrap-0","requirements":{"php":"^7.1"},"hash":{"type":"sha-256","value":"e406841a9839179953998b3b1d2c3db848920c194c7204f3e603d7aead98bab9"},"signature":"https://phar.phpunit.de/phpcpd-4.0.0.phar.asc"},{"version":"3.0.1","phar-url":"https://phar.phpunit.de/phpcpd-3.0.1.phar","bootstrap":"bootstrap-0","requirements":{"php":"^5.6|^7.0"},"hash":{"type":"sha-256","value":"47ff2771b952578c4664dec631dc8720bb3f51f707e13ec9a9d52857b7b63c37"},"signature":"https://phar.phpunit.de/phpcpd-3.0.1.phar.asc"},{"version":"3.0.0","phar-url":"https://phar.phpunit.de/phpcpd-3.0.0.phar","bootstrap":"bootstrap-0","requirements":{"php":"^5.6|^7.0"},"hash":{"type":"sha-256","value":"bc03385966b4bd1e62d717cb746c347401b995a23f0f2c0c72bf78016bb039d3"},"signature":"https://phar.phpunit.de/phpcpd-3.0.0.phar.asc"},{"version":"2.0.4","phar-url":"https://phar.phpunit.de/phpcpd-2.0.4.phar","bootstrap":"bootstrap-0","requirements":{},"hash":{"type":"sha-256","value":"491eeac71f1421395648ff079b60fe4858217b70d66eaa07644351f2699c38fe"},"signature":"https://phar.phpunit.de/phpcpd-2.0.4.phar.asc"},{"version":"2.0.3","phar-url":"https://phar.phpunit.de/phpcpd-2.0.3.phar","bootstrap":"bootstrap-0","requirements":{},"hash":{"type":"sha-256","value":"0fd6826f477922c3e102e4bb142cee97485d0c05f87c24046c7e788db32c1fce"},"signature":"https://phar.phpunit.de/phpcpd-2.0.3.phar.asc"},{"version":"2.0.2","phar-url":"https://phar.phpunit.de/phpcpd-2.0.2.phar","bootstrap":"bootstrap-0","requirements":{},"hash":{"type":"sha-256","value":"8a45aa560e332e663d6c6ac10e1ba543410b748467bdc62724ca6b530b760ca6"},"signature":"https://phar.phpunit.de/phpcpd-2.0.2.phar.asc"},{"version":"2.0.1","phar-url":"https://phar.phpunit.de/phpcpd-2.0.1.phar","bootstrap":"bootstrap-0","requirements":{},"hash":{"type":"sha-256","value":"3060ec805184c4cc31c45a81d456f74dcca9ca05efa662442ef9bf74ffa86e7c"},"signature":"https://phar.phpunit.de/phpcpd-2.0.1.phar.asc"},{"version":"2.0.0","phar-url":"https://phar.phpunit.de/phpcpd-2.0.0.phar","bootstrap":"bootstrap-0","requirements":{},"hash":{"type":"sha-256","value":"ea4856166beb0dace104124deece3f6d43b9af6dbfe44e0bb41f45aba1d85b26"},"signature":"https://phar.phpunit.de/phpcpd-2.0.0.phar.asc"},{"version":"1.4.3","phar-url":"https://phar.phpunit.de/phpcpd-1.4.3.phar","bootstrap":"bootstrap-0","requirements":{},"hash":{"type":"sha-256","value":"4a840653b5402d58b2a5401e710f0e8b5e42b7225b6fde87226427541789a324"},"signature":"https://phar.phpunit.de/phpcpd-1.4.3.phar.asc"},{"version":"1.4.2","phar-url":"https://phar.phpunit.de/phpcpd-1.4.2.phar","bootstrap":"bootstrap-0","requirements":{},"hash":{"type":"sha-256","value":"fce748e5b0bb97bce3f3a44d4061b84ece99a1aa8913db72f747b5837d4c1428"},"signature":"https://phar.phpunit.de/phpcpd-1.4.2.phar.asc"},{"version":"1.4.0","phar-url":"https://phar.phpunit.de/phpcpd-1.4.0.phar","bootstrap":"bootstrap-0","requirements":{},"hash":{"type":"sha-256","value":"d25b51608ef67165c4cbd6eb2fcf600450142fce3bd01a02969c6524c5db5f1e"},"signature":"https://phar.phpunit.de/phpcpd-1.4.0.phar.asc"}]}}