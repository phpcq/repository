{"bootstraps":{"bootstrap-0":{"plugin-version":"1.0.0","type":"inline","code":"<?php\n\nuse Phpcq\\PluginApi\\Version10\\Configuration\\PluginConfigurationBuilderInterface;\nuse Phpcq\\PluginApi\\Version10\\Configuration\\PluginConfigurationInterface;\nuse Phpcq\\PluginApi\\Version10\\DiagnosticsPluginInterface;\nuse Phpcq\\PluginApi\\Version10\\EnvironmentInterface;\nuse Phpcq\\PluginApi\\Version10\\Output\\OutputTransformerFactoryInterface;\nuse Phpcq\\PluginApi\\Version10\\Output\\OutputTransformerInterface;\nuse Phpcq\\PluginApi\\Version10\\Report\\ToolReportInterface;\nuse Phpcq\\PluginApi\\Version10\\Util\\BufferedLineReader;\n\nreturn new class implements DiagnosticsPluginInterface {\n    public function getName(): string\n    {\n        return 'composer-require-checker';\n    }\n\n    public function describeConfiguration(PluginConfigurationBuilderInterface $configOptionsBuilder): void\n    {\n        $configOptionsBuilder\n            ->describeStringOption('config_file', 'Path to configuration file');\n        $configOptionsBuilder\n            ->describeStringOption('composer_file', 'Path to the composer.json (relative to project root)')\n            ->isRequired()\n            ->withDefaultValue('composer.json');\n        $configOptionsBuilder\n            ->describeStringListOption(\n                'custom_flags',\n                'Any custom flags to pass to composer-require-checker.' .\n                'For valid flags refer to the composer-require-checker documentation.',\n            )\n        ;\n    }\n\n    public function createDiagnosticTasks(\n        PluginConfigurationInterface $config,\n        EnvironmentInterface $buildConfig\n    ): iterable {\n        $composerJson = $config->getString('composer_file');\n\n        yield $buildConfig\n            ->getTaskFactory()\n            ->buildRunPhar('composer-require-checker', $this->buildArguments($config, $buildConfig))\n            ->withWorkingDirectory($buildConfig->getProjectConfiguration()->getProjectRootPath())\n            ->withOutputTransformer($this->createOutputTransformerFactory($composerJson))\n            ->build();\n    }\n\n    /** @psalm-return array<int, string> */\n    private function buildArguments(PluginConfigurationInterface $config, EnvironmentInterface $buildConfig): array\n    {\n        $arguments   = ['check'];\n        $projectRoot = $buildConfig->getProjectConfiguration()->getProjectRootPath() . '/';\n\n        if ($config->has('config_file')) {\n            $arguments[] = '--config-file=' . $projectRoot . $config->getString('config_file');\n        }\n        $arguments[] = $projectRoot . $config->getString('composer_file');\n\n        if ($config->has('custom_flags')) {\n            foreach ($config->getStringList('custom_flags') as $value) {\n                $arguments[] = (string) $value;\n            }\n        }\n\n        return $arguments;\n    }\n\n    private function createOutputTransformerFactory(string $composerFile): OutputTransformerFactoryInterface\n    {\n        return new class ($composerFile) implements OutputTransformerFactoryInterface {\n            /** @var string */\n            private $composerFile;\n\n            public function __construct(string $composerFile)\n            {\n                $this->composerFile = $composerFile;\n            }\n\n            public function createFor(ToolReportInterface $report): OutputTransformerInterface\n            {\n                return new class ($this->composerFile, $report) implements OutputTransformerInterface {\n\n                    // eg. ComposerRequireChecker 2.1.0@0c66698d487fcb5c66cf07108e2180c818fb2e72\n                    private const REGEX_HEADER = '#ComposerRequireChecker [0-9]*\\.[0-9]*\\.[0-9]*#';\n\n                    private const REGEX_USAGE_SUMMARY =\n                        '#check \\[--config-file CONFIG-FILE] \\[--ignore-parse-errors] \\[--] \\[<composer-json>]#';\n\n                    /** @var string */\n                    private $composerFile;\n                    /** @var BufferedLineReader */\n                    private $data;\n                    /** @var ToolReportInterface */\n                    private $report;\n\n                    public function __construct(string $composerFile, ToolReportInterface $report)\n                    {\n                        $this->composerFile = $composerFile;\n                        $this->report       = $report;\n                        $this->data         = BufferedLineReader::create();\n                    }\n\n                    public function write(string $data, int $channel): void\n                    {\n                        $this->data->push($data);\n                    }\n\n                    public function finish(int $exitCode): void\n                    {\n                        $this->process();\n                        $this->report->close(0 === $exitCode\n                            ? ToolReportInterface::STATUS_PASSED\n                            : ToolReportInterface::STATUS_FAILED);\n                    }\n\n                    private function logDiagnostic(string $message, string $severity): void\n                    {\n                        $this->report->addDiagnostic($severity, $message)->forFile($this->composerFile)->end()->end();\n                    }\n\n                    private function process(): void\n                    {\n                        // FIXME: this should be a state machine to parse incomplete output but for the moment it works.\n                        $unknown = [];\n                        while (null !== $line = $this->data->peek()) {\n                            if ($this->isLineIgnored($line)) {\n                                $this->data->fetch();\n                                continue;\n                            }\n\n                            // Could be notification of missing dependencies.\n                            // In LocateComposerPackageDirectDependenciesSourceFiles.php line 52:\n                            if (preg_match('#In LocateComposerPackageDirectDependenciesSourceFiles\\.php#', $line)) {\n                                $this->data->fetch();\n                                $this->processLocateComposerPackageDirectDependenciesSourceFiles();\n                                continue;\n                            }\n\n                            // Missing dependencies found, parse the table.\n                            if (preg_match('#The following unknown symbols were found:#', $line)) {\n                                $this->data->fetch();\n                                $this->processMissingSymbols();\n                                continue;\n                            }\n\n                            if (preg_match('#There were no unknown symbols found\\.#', $line)) {\n                                $this->data->fetch();\n                                $this->logDiagnostic($line, 'info');\n                                continue;\n                            }\n                            $unknown[] = $line;\n                            $this->data->fetch();\n                        }\n                        if ([] !== $unknown) {\n                            $this->logDiagnostic(\n                                'Did not understand the following output from composer-require-checker: ' .\n                                implode(\"\\n\", $unknown),\n                                'warning'\n                            );\n                            $this->report\n                                ->addAttachment('composer-require-checker.log')\n                                    ->fromString($this->data->getData())\n                                ->end();\n                        }\n                    }\n\n                    private function isLineIgnored(string $line): bool\n                    {\n                        if ('' === $line) {\n                            return true;\n                        }\n                        // If it is the version header, ignore it.\n                        if (preg_match(self::REGEX_HEADER, $line)) {\n                            return true;\n                        }\n\n                        // If it is the usage suffix, ignore it.\n                        if (preg_match(self::REGEX_USAGE_SUMMARY, $line)) {\n                            $this->data->fetch();\n                            return true;\n                        }\n\n                        return false;\n                    }\n\n                    private function processLocateComposerPackageDirectDependenciesSourceFiles(): void\n                    {\n                        // Format is:\n                        // \\n\\n<message>\\n\n                        $error = '';\n                        // Buffer up until two empty lines.\n                        while (null !== $line = $this->data->fetch()) {\n                            if (!$this->isLineIgnored($line)) {\n                                $error .= $line;\n                            }\n                        }\n                        if ('' !== $error) {\n                            $this->logDiagnostic($error, 'error');\n                        }\n                    }\n\n                    private function processMissingSymbols(): void\n                    {\n                        /*\n                         * The following unknown symbols were found:\n                         * +----------------+--------------------+\n                         * | unknown symbol | guessed dependency |\n                         * +----------------+--------------------+\n                         * | DOMDocument    | ext-dom            |\n                         * | DOMElement     | ext-dom            |\n                         * | DOMNode        | ext-dom            |\n                         * +----------------+--------------------+\n                        */\n\n                        // Strip table head.\n                        foreach (\n                            [\n                                '#^\\+-*\\+-*\\+$#',\n                                '#\\|\\s*unknown symbol\\s*\\|\\s*guessed dependency\\s*\\|#',\n                                '#^\\+-*\\+-*\\+$#',\n                            ] as $regex\n                        ) {\n                            if (1 !== preg_match($regex, $line = (string) $this->data->fetch())) {\n                                throw new RuntimeException('Failed to parse line: ' . $line);\n                            }\n                        }\n                        // List missing dependencies.\n                        $dependencies = [];\n                        $unknown      = [];\n                        while (null !== $line = $this->data->fetch()) {\n                            if (preg_match('#^\\+-*\\+-*\\+$#', $line)) {\n                                // End of table.\n                                break;\n                            }\n                            if (!preg_match('#\\|\\s*(?<symbol>.*)\\s*\\|\\s*(?<dependency>.*)?\\s*\\|#', $line, $matches)) {\n                                throw new RuntimeException('Failed to parse line: ' . $line);\n                            }\n                            $dependency = trim($matches['dependency'] ?? '');\n                            $symbol     = trim($matches['symbol'] ?? '');\n                            if ('' === $dependency) {\n                                $unknown[] = $symbol;\n                                continue;\n                            }\n                            if (!isset($dependencies[$dependency])) {\n                                $dependencies[$dependency] = [];\n                            }\n                            $dependencies[$dependency][] = $symbol;\n                        }\n                        foreach ($dependencies as $dependency => $symbols) {\n                            $this->logDiagnostic(\n                                sprintf(\n                                    'Missing dependency \"%1$s\" (used symbols: \"%2$s\")',\n                                    $dependency,\n                                    implode('\", \"', $symbols)\n                                ),\n                                'error'\n                            );\n                        }\n                        if (!empty($unknown)) {\n                            $this->logDiagnostic(\n                                sprintf(\n                                    'Unknown symbols found: \"%1$s\" - is there a dependency missing?',\n                                    implode('\", \"', $unknown)\n                                ),\n                                'error'\n                            );\n                        }\n                    }\n                };\n            }\n        };\n    }\n};\n","hash":{"type":"sha-512","value":"a9889e09fdc80b785e8d5494fb94ad626ed75f923754129ab37b7f1571641c28a8382822d0196fe785a0c9815d3501bbc6e4cffd69e4c311d39888da232748c3"}}},"phars":{"composer-require-checker":[{"version":"0.1.0","phar-url":"https://github.com/maglnet/ComposerRequireChecker/releases/download/0.1.0/composer-require-checker.phar","bootstrap":"bootstrap-0","requirements":{"php":"~7.0","ext-json":"*","ext-pcre":"*","ext-spl":"*","ext-reflection":"*","ext-phar":"*"},"hash":null,"signature":null},{"version":"0.1.1","phar-url":"https://github.com/maglnet/ComposerRequireChecker/releases/download/0.1.1/composer-require-checker.phar","bootstrap":"bootstrap-0","requirements":{"php":"~7.0","ext-json":"*","ext-pcre":"*","ext-spl":"*","ext-reflection":"*","ext-phar":"*"},"hash":null,"signature":null},{"version":"0.1.2","phar-url":"https://github.com/maglnet/ComposerRequireChecker/releases/download/0.1.2/composer-require-checker.phar","bootstrap":"bootstrap-0","requirements":{"php":"~7.0","ext-json":"*","ext-phar":"*"},"hash":null,"signature":"https://github.com/maglnet/ComposerRequireChecker/releases/download/0.1.2/composer-require-checker.phar.asc"},{"version":"0.1.3","phar-url":"https://github.com/maglnet/ComposerRequireChecker/releases/download/0.1.3/composer-require-checker.phar","bootstrap":"bootstrap-0","requirements":{"php":"~7.0","ext-json":"*","ext-phar":"*"},"hash":null,"signature":"https://github.com/maglnet/ComposerRequireChecker/releases/download/0.1.3/composer-require-checker.phar.asc"},{"version":"0.1.4","phar-url":"https://github.com/maglnet/ComposerRequireChecker/releases/download/0.1.4/composer-require-checker.phar","bootstrap":"bootstrap-0","requirements":{"php":"~7.0","ext-json":"*","ext-phar":"*"},"hash":null,"signature":"https://github.com/maglnet/ComposerRequireChecker/releases/download/0.1.4/composer-require-checker.phar.asc"},{"version":"0.1.5","phar-url":"https://github.com/maglnet/ComposerRequireChecker/releases/download/0.1.5/composer-require-checker.phar","bootstrap":"bootstrap-0","requirements":{"php":"~7.0","ext-json":"*","ext-phar":"*"},"hash":null,"signature":"https://github.com/maglnet/ComposerRequireChecker/releases/download/0.1.5/composer-require-checker.phar.asc"},{"version":"0.1.6","phar-url":"https://github.com/maglnet/ComposerRequireChecker/releases/download/0.1.6/composer-require-checker.phar","bootstrap":"bootstrap-0","requirements":{"php":"~7.0","ext-json":"*","ext-phar":"*"},"hash":null,"signature":"https://github.com/maglnet/ComposerRequireChecker/releases/download/0.1.6/composer-require-checker.phar.asc"},{"version":"0.2.0","phar-url":"https://github.com/maglnet/ComposerRequireChecker/releases/download/0.2.0/composer-require-checker.phar","bootstrap":"bootstrap-0","requirements":{"php":"~7.1","ext-json":"*","ext-phar":"*"},"hash":null,"signature":"https://github.com/maglnet/ComposerRequireChecker/releases/download/0.2.0/composer-require-checker.phar.asc"},{"version":"0.2.1","phar-url":"https://github.com/maglnet/ComposerRequireChecker/releases/download/0.2.1/composer-require-checker.phar","bootstrap":"bootstrap-0","requirements":{"php":"~7.1","ext-json":"*","ext-phar":"*"},"hash":null,"signature":"https://github.com/maglnet/ComposerRequireChecker/releases/download/0.2.1/composer-require-checker.phar.asc"},{"version":"1.0.0","phar-url":"https://github.com/maglnet/ComposerRequireChecker/releases/download/1.0.0/composer-require-checker.phar","bootstrap":"bootstrap-0","requirements":{"php":"~7.1","ext-json":"*","ext-phar":"*"},"hash":null,"signature":"https://github.com/maglnet/ComposerRequireChecker/releases/download/1.0.0/composer-require-checker.phar.asc"},{"version":"1.1.0","phar-url":"https://github.com/maglnet/ComposerRequireChecker/releases/download/1.1.0/composer-require-checker.phar","bootstrap":"bootstrap-0","requirements":{"php":"~7.1","ext-json":"*","ext-phar":"*"},"hash":null,"signature":"https://github.com/maglnet/ComposerRequireChecker/releases/download/1.1.0/composer-require-checker.phar.asc"},{"version":"2.0.0","phar-url":"https://github.com/maglnet/ComposerRequireChecker/releases/download/2.0.0/composer-require-checker.phar","bootstrap":"bootstrap-0","requirements":{"php":"^7.1","ext-json":"*","ext-phar":"*"},"hash":null,"signature":"https://github.com/maglnet/ComposerRequireChecker/releases/download/2.0.0/composer-require-checker.phar.asc"},{"version":"2.1.0","phar-url":"https://github.com/maglnet/ComposerRequireChecker/releases/download/2.1.0/composer-require-checker.phar","bootstrap":"bootstrap-0","requirements":{"php":"^7.2","ext-json":"*","ext-phar":"*"},"hash":null,"signature":"https://github.com/maglnet/ComposerRequireChecker/releases/download/2.1.0/composer-require-checker.phar.asc"}]}}